
stm32h750b_dk_adc_scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000917c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08009434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000154  20000010  08009444  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000164  08009444  00020164  2**0
                  ALLOC
  8 .buf_data_d3  00000020  38000000  38000000  00030000  2**5
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e307  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cde  00000000  00000000  0003e345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001148  00000000  00000000  00041028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001050  00000000  00000000  00042170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000385d5  00000000  00000000  000431c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015843  00000000  00000000  0007b795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001723bd  00000000  00000000  00090fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00203395  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a24  00000000  00000000  002033e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080093fc 	.word	0x080093fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080093fc 	.word	0x080093fc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f001 f803 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f857 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f9d7 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ea:	f000 f9b5 	bl	8000658 <MX_DMA_Init>
  MX_ADC3_Init();
 80002ee:	f000 f8cb 	bl	8000488 <MX_ADC3_Init>
  MX_TIM2_Init();
 80002f2:	f000 f963 	bl	80005bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Set the buffer with a known value*/
  for(uint32_t i = 0; i< BUFFER_SAMPLES; i++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	e008      	b.n	800030e <main+0x36>
  {
	  adc_buffer[i] = ADC_DEFAULT_VALUE;
 80002fc:	4a20      	ldr	r2, [pc, #128]	; (8000380 <main+0xa8>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint32_t i = 0; i< BUFFER_SAMPLES; i++)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b07      	cmp	r3, #7
 8000312:	d9f3      	bls.n	80002fc <main+0x24>
  }

  /*Turn off Red LED*/
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <main+0xac>)
 800031c:	f005 f9c4 	bl	80056a8 <HAL_GPIO_WritePin>

  /*Turn off Green LED*/
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2104      	movs	r1, #4
 8000324:	4818      	ldr	r0, [pc, #96]	; (8000388 <main+0xb0>)
 8000326:	f005 f9bf 	bl	80056a8 <HAL_GPIO_WritePin>

  /*ADC Offset Calibration*/
  if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800032a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800032e:	2100      	movs	r1, #0
 8000330:	4816      	ldr	r0, [pc, #88]	; (800038c <main+0xb4>)
 8000332:	f002 fd8b 	bl	8002e4c <HAL_ADCEx_Calibration_Start>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x68>
  {
	  Error_Handler();
 800033c:	f000 fd9a 	bl	8000e74 <Error_Handler>
  }

  /*ADC Linearity Calibration*/
  if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000340:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <main+0xb4>)
 800034a:	f002 fd7f 	bl	8002e4c <HAL_ADCEx_Calibration_Start>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <main+0x80>
  {
	  Error_Handler();
 8000354:	f000 fd8e 	bl	8000e74 <Error_Handler>
  }

  /*Start DMA transfers*/
  if(HAL_ADC_Start_DMA(&hadc3, &adc_buffer, BUFFER_SAMPLES) != HAL_OK)
 8000358:	2208      	movs	r2, #8
 800035a:	4909      	ldr	r1, [pc, #36]	; (8000380 <main+0xa8>)
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <main+0xb4>)
 800035e:	f001 fc45 	bl	8001bec <HAL_ADC_Start_DMA>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <main+0x94>
  {
	  Error_Handler();
 8000368:	f000 fd84 	bl	8000e74 <Error_Handler>
  }

  /* Start timer 2 and therefore start the ADC3 sampling*/
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800036c:	4808      	ldr	r0, [pc, #32]	; (8000390 <main+0xb8>)
 800036e:	f008 fb73 	bl	8008a58 <HAL_TIM_Base_Start_IT>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <main+0xa4>
  {
	  Error_Handler();
 8000378:	f000 fd7c 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800037c:	e7fe      	b.n	800037c <main+0xa4>
 800037e:	bf00      	nop
 8000380:	38000000 	.word	0x38000000
 8000384:	58022000 	.word	0x58022000
 8000388:	58022400 	.word	0x58022400
 800038c:	200000b0 	.word	0x200000b0
 8000390:	20000114 	.word	0x20000114

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b09c      	sub	sp, #112	; 0x70
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039e:	224c      	movs	r2, #76	; 0x4c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f009 f822 	bl	80093ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2220      	movs	r2, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f009 f81c 	bl	80093ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003b4:	2002      	movs	r0, #2
 80003b6:	f005 f9ab 	bl	8005710 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <SystemClock_Config+0xe8>)
 80003c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003c2:	4a2e      	ldr	r2, [pc, #184]	; (800047c <SystemClock_Config+0xe8>)
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <SystemClock_Config+0xe8>)
 80003cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <SystemClock_Config+0xec>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003dc:	4a28      	ldr	r2, [pc, #160]	; (8000480 <SystemClock_Config+0xec>)
 80003de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemClock_Config+0xec>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f0:	bf00      	nop
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <SystemClock_Config+0xec>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003fe:	d1f8      	bne.n	80003f2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemClock_Config+0xf0>)
 8000402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000404:	f023 0303 	bic.w	r3, r3, #3
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <SystemClock_Config+0xf0>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000410:	2303      	movs	r3, #3
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000414:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800041a:	2301      	movs	r3, #1
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041e:	2340      	movs	r3, #64	; 0x40
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000422:	2300      	movs	r3, #0
 8000424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	2302      	movs	r3, #2
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800042e:	4618      	mov	r0, r3
 8000430:	f005 f9a8 	bl	8005784 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800043a:	f000 fd1b 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	233f      	movs	r3, #63	; 0x3f
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f005 fdba 	bl	8005fdc <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800046e:	f000 fd01 	bl	8000e74 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3770      	adds	r7, #112	; 0x70
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	58000400 	.word	0x58000400
 8000480:	58024800 	.word	0x58024800
 8000484:	58024400 	.word	0x58024400

08000488 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80004a0:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004a2:	4a41      	ldr	r2, [pc, #260]	; (80005a8 <MX_ADC3_Init+0x120>)
 80004a4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004ac:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004ae:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004b0:	2208      	movs	r2, #8
 80004b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004b4:	4b3b      	ldr	r3, [pc, #236]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004ba:	4b3a      	ldr	r3, [pc, #232]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004bc:	2208      	movs	r2, #8
 80004be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004c0:	4b38      	ldr	r3, [pc, #224]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004c6:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80004cc:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 2;
 80004d8:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004da:	2202      	movs	r2, #2
 80004dc:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80004de:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004e0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004f0:	2203      	movs	r2, #3
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_ADC3_Init+0x11c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_ADC3_Init+0x11c>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800050a:	4826      	ldr	r0, [pc, #152]	; (80005a4 <MX_ADC3_Init+0x11c>)
 800050c:	f001 f9ce 	bl	80018ac <HAL_ADC_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000516:	f000 fcad 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_ADC3_Init+0x124>)
 800051c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800051e:	2306      	movs	r3, #6
 8000520:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000522:	2307      	movs	r3, #7
 8000524:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000526:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800052a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052c:	2304      	movs	r3, #4
 800052e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	481a      	ldr	r0, [pc, #104]	; (80005a4 <MX_ADC3_Init+0x11c>)
 800053a:	f001 fe7d 	bl	8002238 <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC3_Init+0xc0>
  {
    Error_Handler();
 8000544:	f000 fc96 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <MX_ADC3_Init+0x128>)
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800054c:	230c      	movs	r3, #12
 800054e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <MX_ADC3_Init+0x11c>)
 8000556:	f001 fe6f 	bl	8002238 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000560:	f000 fc88 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <MX_ADC3_Init+0x12c>)
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000568:	2312      	movs	r3, #18
 800056a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <MX_ADC3_Init+0x11c>)
 8000572:	f001 fe61 	bl	8002238 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 800057c:	f000 fc7a 	bl	8000e74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_ADC3_Init+0x130>)
 8000582:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000584:	2318      	movs	r3, #24
 8000586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_ADC3_Init+0x11c>)
 800058e:	f001 fe53 	bl	8002238 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC3_Init+0x114>
  {
    Error_Handler();
 8000598:	f000 fc6c 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000b0 	.word	0x200000b0
 80005a8:	58026000 	.word	0x58026000
 80005ac:	1d500080 	.word	0x1d500080
 80005b0:	c7520000 	.word	0xc7520000
 80005b4:	cb840000 	.word	0xcb840000
 80005b8:	cfb80000 	.word	0xcfb80000

080005bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_TIM2_Init+0x98>)
 80005dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5999;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_TIM2_Init+0x98>)
 80005e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80005e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_TIM2_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_TIM2_Init+0x98>)
 80005f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_TIM2_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_TIM2_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <MX_TIM2_Init+0x98>)
 8000606:	f008 f9cf 	bl	80089a8 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000610:	f000 fc30 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_TIM2_Init+0x98>)
 8000622:	f008 fbb1 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800062c:	f000 fc22 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000630:	2320      	movs	r3, #32
 8000632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_TIM2_Init+0x98>)
 800063e:	f008 fe05 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 fc14 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000114 	.word	0x20000114

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_DMA_Init+0x3c>)
 8000660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_DMA_Init+0x3c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_DMA_Init+0x3c>)
 8000670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	200b      	movs	r0, #11
 8000682:	f002 fd54 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000686:	200b      	movs	r0, #11
 8000688:	f002 fd6b 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	58024400 	.word	0x58024400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	; 0x40
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ae:	4bbd      	ldr	r3, [pc, #756]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	4abb      	ldr	r2, [pc, #748]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006be:	4bb9      	ldr	r3, [pc, #740]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4bb5      	ldr	r3, [pc, #724]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	4ab4      	ldr	r2, [pc, #720]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006dc:	4bb1      	ldr	r3, [pc, #708]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006ea:	4bae      	ldr	r3, [pc, #696]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	4aac      	ldr	r2, [pc, #688]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fa:	4baa      	ldr	r3, [pc, #680]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000704:	623b      	str	r3, [r7, #32]
 8000706:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000708:	4ba6      	ldr	r3, [pc, #664]	; (80009a4 <MX_GPIO_Init+0x30c>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070e:	4aa5      	ldr	r2, [pc, #660]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000718:	4ba2      	ldr	r3, [pc, #648]	; (80009a4 <MX_GPIO_Init+0x30c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000722:	61fb      	str	r3, [r7, #28]
 8000724:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b9f      	ldr	r3, [pc, #636]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	4a9d      	ldr	r2, [pc, #628]	; (80009a4 <MX_GPIO_Init+0x30c>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000736:	4b9b      	ldr	r3, [pc, #620]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000744:	4b97      	ldr	r3, [pc, #604]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a96      	ldr	r2, [pc, #600]	; (80009a4 <MX_GPIO_Init+0x30c>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b93      	ldr	r3, [pc, #588]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000762:	4b90      	ldr	r3, [pc, #576]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a8e      	ldr	r2, [pc, #568]	; (80009a4 <MX_GPIO_Init+0x30c>)
 800076a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b8c      	ldr	r3, [pc, #560]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b88      	ldr	r3, [pc, #544]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a87      	ldr	r2, [pc, #540]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b84      	ldr	r3, [pc, #528]	; (80009a4 <MX_GPIO_Init+0x30c>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b81      	ldr	r3, [pc, #516]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a7f      	ldr	r2, [pc, #508]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b7d      	ldr	r3, [pc, #500]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b79      	ldr	r3, [pc, #484]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a78      	ldr	r2, [pc, #480]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b75      	ldr	r3, [pc, #468]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b72      	ldr	r3, [pc, #456]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a70      	ldr	r2, [pc, #448]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <MX_GPIO_Init+0x30c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	486a      	ldr	r0, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x310>)
 8000800:	f004 ff52 	bl	80056a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	4868      	ldr	r0, [pc, #416]	; (80009ac <MX_GPIO_Init+0x314>)
 800080a:	f004 ff4d 	bl	80056a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	4866      	ldr	r0, [pc, #408]	; (80009b0 <MX_GPIO_Init+0x318>)
 8000816:	f004 ff47 	bl	80056a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 800081a:	23f0      	movs	r3, #240	; 0xf0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800082a:	230a      	movs	r3, #10
 800082c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	485c      	ldr	r0, [pc, #368]	; (80009a8 <MX_GPIO_Init+0x310>)
 8000836:	f004 fd87 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 800083a:	f242 0320 	movw	r3, #8224	; 0x2020
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800084c:	2309      	movs	r3, #9
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000854:	4619      	mov	r1, r3
 8000856:	4856      	ldr	r0, [pc, #344]	; (80009b0 <MX_GPIO_Init+0x318>)
 8000858:	f004 fd76 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800085c:	23fc      	movs	r3, #252	; 0xfc
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800086c:	230e      	movs	r3, #14
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000874:	4619      	mov	r1, r3
 8000876:	484f      	ldr	r0, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x31c>)
 8000878:	f004 fd66 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800088e:	230a      	movs	r3, #10
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	4847      	ldr	r0, [pc, #284]	; (80009b8 <MX_GPIO_Init+0x320>)
 800089a:	f004 fd55 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 800089e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008b0:	230c      	movs	r3, #12
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4840      	ldr	r0, [pc, #256]	; (80009bc <MX_GPIO_Init+0x324>)
 80008bc:	f004 fd44 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80008c0:	f24d 2303 	movw	r3, #53763	; 0xd203
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008d2:	230e      	movs	r3, #14
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x310>)
 80008de:	f004 fd33 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80008e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f4:	230c      	movs	r3, #12
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	4830      	ldr	r0, [pc, #192]	; (80009c0 <MX_GPIO_Init+0x328>)
 8000900:	f004 fd22 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000914:	230a      	movs	r3, #10
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091c:	4619      	mov	r1, r3
 800091e:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x318>)
 8000920:	f004 fd12 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000924:	2310      	movs	r3, #16
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000934:	2307      	movs	r3, #7
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093c:	4619      	mov	r1, r3
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x318>)
 8000940:	f004 fd02 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000944:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095e:	4619      	mov	r1, r3
 8000960:	4815      	ldr	r0, [pc, #84]	; (80009b8 <MX_GPIO_Init+0x320>)
 8000962:	f004 fcf1 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000966:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000978:	230e      	movs	r3, #14
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800097c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000980:	4619      	mov	r1, r3
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <MX_GPIO_Init+0x314>)
 8000984:	f004 fce0 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000988:	2308      	movs	r3, #8
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	e00f      	b.n	80009c4 <MX_GPIO_Init+0x32c>
 80009a4:	58024400 	.word	0x58024400
 80009a8:	58022000 	.word	0x58022000
 80009ac:	58022400 	.word	0x58022400
 80009b0:	58020400 	.word	0x58020400
 80009b4:	58022800 	.word	0x58022800
 80009b8:	58021800 	.word	0x58021800
 80009bc:	58020800 	.word	0x58020800
 80009c0:	58021000 	.word	0x58021000
 80009c4:	48bc      	ldr	r0, [pc, #752]	; (8000cb8 <MX_GPIO_Init+0x620>)
 80009c6:	f004 fcbf 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ca:	2304      	movs	r3, #4
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	48b5      	ldr	r0, [pc, #724]	; (8000cbc <MX_GPIO_Init+0x624>)
 80009e6:	f004 fcaf 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	48ae      	ldr	r0, [pc, #696]	; (8000cc0 <MX_GPIO_Init+0x628>)
 8000a08:	f004 fc9e 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000a0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	48a5      	ldr	r0, [pc, #660]	; (8000cc0 <MX_GPIO_Init+0x628>)
 8000a2a:	f004 fc8d 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	489e      	ldr	r0, [pc, #632]	; (8000cc4 <MX_GPIO_Init+0x62c>)
 8000a4a:	f004 fc7d 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4895      	ldr	r0, [pc, #596]	; (8000cb8 <MX_GPIO_Init+0x620>)
 8000a62:	f004 fc71 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000a66:	2330      	movs	r3, #48	; 0x30
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000a76:	230a      	movs	r3, #10
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4890      	ldr	r0, [pc, #576]	; (8000cc4 <MX_GPIO_Init+0x62c>)
 8000a82:	f004 fc61 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4889      	ldr	r0, [pc, #548]	; (8000cc8 <MX_GPIO_Init+0x630>)
 8000aa4:	f004 fc50 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000aa8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aba:	230c      	movs	r3, #12
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4881      	ldr	r0, [pc, #516]	; (8000ccc <MX_GPIO_Init+0x634>)
 8000ac6:	f004 fc3f 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000aca:	2304      	movs	r3, #4
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ada:	230c      	movs	r3, #12
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4874      	ldr	r0, [pc, #464]	; (8000cb8 <MX_GPIO_Init+0x620>)
 8000ae6:	f004 fc2f 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b04:	4619      	mov	r1, r3
 8000b06:	486c      	ldr	r0, [pc, #432]	; (8000cb8 <MX_GPIO_Init+0x620>)
 8000b08:	f004 fc1e 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	486b      	ldr	r0, [pc, #428]	; (8000cd0 <MX_GPIO_Init+0x638>)
 8000b22:	f004 fc11 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4866      	ldr	r0, [pc, #408]	; (8000cd4 <MX_GPIO_Init+0x63c>)
 8000b3c:	f004 fc04 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	485c      	ldr	r0, [pc, #368]	; (8000cd0 <MX_GPIO_Init+0x638>)
 8000b5e:	f004 fbf3 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_P_Pin USB_OTG_FS2_N_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8000b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b74:	230a      	movs	r3, #10
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4854      	ldr	r0, [pc, #336]	; (8000cd0 <MX_GPIO_Init+0x638>)
 8000b80:	f004 fbe2 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4846      	ldr	r0, [pc, #280]	; (8000cbc <MX_GPIO_Init+0x624>)
 8000ba2:	f004 fbd1 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000ba6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4845      	ldr	r0, [pc, #276]	; (8000cd8 <MX_GPIO_Init+0x640>)
 8000bc4:	f004 fbc0 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bde:	4619      	mov	r1, r3
 8000be0:	4836      	ldr	r0, [pc, #216]	; (8000cbc <MX_GPIO_Init+0x624>)
 8000be2:	f004 fbb1 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000be6:	2304      	movs	r3, #4
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4834      	ldr	r0, [pc, #208]	; (8000ccc <MX_GPIO_Init+0x634>)
 8000bfc:	f004 fba4 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	4832      	ldr	r0, [pc, #200]	; (8000cdc <MX_GPIO_Init+0x644>)
 8000c14:	f004 fb98 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000c18:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c32:	4619      	mov	r1, r3
 8000c34:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <MX_GPIO_Init+0x640>)
 8000c36:	f004 fb87 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4821      	ldr	r0, [pc, #132]	; (8000cd4 <MX_GPIO_Init+0x63c>)
 8000c4e:	f004 fb7b 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c64:	230a      	movs	r3, #10
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <MX_GPIO_Init+0x640>)
 8000c70:	f004 fb6a 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000c74:	233e      	movs	r3, #62	; 0x3e
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_GPIO_Init+0x63c>)
 8000c90:	f004 fb5a 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_GPIO_Init+0x628>)
 8000cb0:	f004 fb4a 	bl	8005348 <HAL_GPIO_Init>
 8000cb4:	e014      	b.n	8000ce0 <MX_GPIO_Init+0x648>
 8000cb6:	bf00      	nop
 8000cb8:	58020c00 	.word	0x58020c00
 8000cbc:	58022000 	.word	0x58022000
 8000cc0:	58021c00 	.word	0x58021c00
 8000cc4:	58021000 	.word	0x58021000
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58021800 	.word	0x58021800
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	58020800 	.word	0x58020800
 8000cd8:	58021400 	.word	0x58021400
 8000cdc:	58022800 	.word	0x58022800

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000ce0:	2386      	movs	r3, #134	; 0x86
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4859      	ldr	r0, [pc, #356]	; (8000e60 <MX_GPIO_Init+0x7c8>)
 8000cfc:	f004 fb24 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d00:	23e0      	movs	r3, #224	; 0xe0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d10:	230c      	movs	r3, #12
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4852      	ldr	r0, [pc, #328]	; (8000e64 <MX_GPIO_Init+0x7cc>)
 8000d1c:	f004 fb14 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d32:	2307      	movs	r3, #7
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	484a      	ldr	r0, [pc, #296]	; (8000e68 <MX_GPIO_Init+0x7d0>)
 8000d3e:	f004 fb03 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4842      	ldr	r0, [pc, #264]	; (8000e64 <MX_GPIO_Init+0x7cc>)
 8000d5a:	f004 faf5 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000d6e:	2309      	movs	r3, #9
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4839      	ldr	r0, [pc, #228]	; (8000e60 <MX_GPIO_Init+0x7c8>)
 8000d7a:	f004 fae5 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d90:	230e      	movs	r3, #14
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4832      	ldr	r0, [pc, #200]	; (8000e64 <MX_GPIO_Init+0x7cc>)
 8000d9c:	f004 fad4 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000db2:	2309      	movs	r3, #9
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482b      	ldr	r0, [pc, #172]	; (8000e6c <MX_GPIO_Init+0x7d4>)
 8000dbe:	f004 fac3 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_GPIO_Init+0x7d0>)
 8000dde:	f004 fab3 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000de2:	2304      	movs	r3, #4
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <MX_GPIO_Init+0x7d8>)
 8000dfa:	f004 faa5 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_GPIO_Init+0x7d0>)
 8000e18:	f004 fa96 	bl	8005348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0x7d0>)
 8000e3a:	f004 fa85 	bl	8005348 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000e3e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e42:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e46:	f000 faed 	bl	8001424 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000e4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000e4e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e52:	f000 fae7 	bl	8001424 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000e56:	bf00      	nop
 8000e58:	3740      	adds	r7, #64	; 0x40
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	58020000 	.word	0x58020000
 8000e64:	58021c00 	.word	0x58021c00
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58020c00 	.word	0x58020c00
 8000e70:	58022400 	.word	0x58022400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x30>)
 8000e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ba      	sub	sp, #232	; 0xe8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	22bc      	movs	r2, #188	; 0xbc
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f008 fa89 	bl	80093ec <memset>
  if(hadc->Instance==ADC3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <HAL_ADC_MspInit+0x19c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	f040 80b1 	bne.w	8001048 <HAL_ADC_MspInit+0x194>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ee6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f00:	23c0      	movs	r3, #192	; 0xc0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f04:	2320      	movs	r3, #32
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 fbc0 	bl	800669c <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000f22:	f7ff ffa7 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f26:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a49      	ldr	r2, [pc, #292]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a42      	ldr	r2, [pc, #264]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_ADC_MspInit+0x1a0>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482f      	ldr	r0, [pc, #188]	; (8001058 <HAL_ADC_MspInit+0x1a4>)
 8000f9c:	f004 f9d4 	bl	8005348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4828      	ldr	r0, [pc, #160]	; (800105c <HAL_ADC_MspInit+0x1a8>)
 8000fba:	f004 f9c5 	bl	8005348 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000fbe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000fc2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000fc6:	f000 fa2d 	bl	8001424 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000fca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000fce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000fd2:	f000 fa27 	bl	8001424 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000fd8:	4a22      	ldr	r2, [pc, #136]	; (8001064 <HAL_ADC_MspInit+0x1b0>)
 8000fda:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000fde:	2273      	movs	r2, #115	; 0x73
 8000fe0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8000ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001004:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800101c:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 800101e:	f002 f8bb 	bl	8003198 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8001028:	f7ff ff24 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001030:	64da      	str	r2, [r3, #76]	; 0x4c
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_ADC_MspInit+0x1ac>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	207f      	movs	r0, #127	; 0x7f
 800103e:	f002 f876 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001042:	207f      	movs	r0, #127	; 0x7f
 8001044:	f002 f88d 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	37e8      	adds	r7, #232	; 0xe8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58026000 	.word	0x58026000
 8001054:	58024400 	.word	0x58024400
 8001058:	58021400 	.word	0x58021400
 800105c:	58020800 	.word	0x58020800
 8001060:	20000038 	.word	0x20000038
 8001064:	40020010 	.word	0x40020010

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001078:	d116      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_TIM_Base_MspInit+0x48>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_TIM_Base_MspInit+0x48>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_TIM_Base_MspInit+0x48>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	201c      	movs	r0, #28
 800109e:	f002 f846 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a2:	201c      	movs	r0, #28
 80010a4:	f002 f85d 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f964 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <DMA1_Stream0_IRQHandler+0x20>)
 800110e:	f002 fe09 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  dma1_stream0_interrput_counter++;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <DMA1_Stream0_IRQHandler+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <DMA1_Stream0_IRQHandler+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
  /* Toggle Green LED*/
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800111c:	2104      	movs	r1, #4
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <DMA1_Stream0_IRQHandler+0x28>)
 8001120:	f004 fadb 	bl	80056da <HAL_GPIO_TogglePin>
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000038 	.word	0x20000038
 800112c:	20000034 	.word	0x20000034
 8001130:	58022400 	.word	0x58022400

08001134 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <TIM2_IRQHandler+0x24>)
 800113a:	f007 fd05 	bl	8008b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  tim2_interrput_counter++;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <TIM2_IRQHandler+0x28>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <TIM2_IRQHandler+0x28>)
 8001146:	6013      	str	r3, [r2, #0]
  /* Toggle Red LED*/
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <TIM2_IRQHandler+0x2c>)
 800114e:	f004 fac4 	bl	80056da <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000114 	.word	0x20000114
 800115c:	20000030 	.word	0x20000030
 8001160:	58022000 	.word	0x58022000

08001164 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <ADC3_IRQHandler+0x18>)
 800116a:	f000 fe03 	bl	8001d74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
  adc3_interrput_counter++;
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <ADC3_IRQHandler+0x1c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a02      	ldr	r2, [pc, #8]	; (8001180 <ADC3_IRQHandler+0x1c>)
 8001176:	6013      	str	r3, [r2, #0]
  /* USER CODE END ADC3_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000b0 	.word	0x200000b0
 8001180:	2000002c 	.word	0x2000002c

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <SystemInit+0xe4>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <SystemInit+0xe4>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <SystemInit+0xe8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b06      	cmp	r3, #6
 80011a2:	d807      	bhi.n	80011b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a4:	4b31      	ldr	r3, [pc, #196]	; (800126c <SystemInit+0xe8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <SystemInit+0xe8>)
 80011ae:	f043 0307 	orr.w	r3, r3, #7
 80011b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <SystemInit+0xec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <SystemInit+0xec>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <SystemInit+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <SystemInit+0xec>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4929      	ldr	r1, [pc, #164]	; (8001270 <SystemInit+0xec>)
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <SystemInit+0xf0>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <SystemInit+0xe8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <SystemInit+0xe8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 030f 	bic.w	r3, r3, #15
 80011e6:	4a21      	ldr	r2, [pc, #132]	; (800126c <SystemInit+0xe8>)
 80011e8:	f043 0307 	orr.w	r3, r3, #7
 80011ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <SystemInit+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <SystemInit+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <SystemInit+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <SystemInit+0xec>)
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <SystemInit+0xf4>)
 8001204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <SystemInit+0xec>)
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <SystemInit+0xf8>)
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <SystemInit+0xec>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <SystemInit+0xfc>)
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <SystemInit+0xec>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <SystemInit+0xec>)
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <SystemInit+0xfc>)
 800121c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <SystemInit+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <SystemInit+0xec>)
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <SystemInit+0xfc>)
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <SystemInit+0xec>)
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <SystemInit+0xec>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <SystemInit+0xec>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <SystemInit+0xec>)
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <SystemInit+0x100>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <SystemInit+0x104>)
 8001248:	4013      	ands	r3, r2
 800124a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124e:	d202      	bcs.n	8001256 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <SystemInit+0x108>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <SystemInit+0x10c>)
 8001258:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800125c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	52002000 	.word	0x52002000
 8001270:	58024400 	.word	0x58024400
 8001274:	eaf6ed7f 	.word	0xeaf6ed7f
 8001278:	02020200 	.word	0x02020200
 800127c:	01ff0000 	.word	0x01ff0000
 8001280:	01010280 	.word	0x01010280
 8001284:	5c001000 	.word	0x5c001000
 8001288:	ffff0000 	.word	0xffff0000
 800128c:	51008108 	.word	0x51008108
 8001290:	52004000 	.word	0x52004000

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001298:	f7ff ff74 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f008 f86f 	bl	80093a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f807 	bl	80002d8 <main>
  bx  lr
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012d8:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 80012dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012e0:	20000164 	.word	0x20000164

080012e4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f001 ff12 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f4:	f005 f828 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_Init+0x68>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	4913      	ldr	r1, [pc, #76]	; (8001354 <HAL_Init+0x6c>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_Init+0x68>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_Init+0x6c>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_Init+0x70>)
 800132a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_Init+0x74>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f814 	bl	8001360 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e002      	b.n	8001348 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001342:	f7ff fd9d 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400
 8001354:	08009414 	.word	0x08009414
 8001358:	20000004 	.word	0x20000004
 800135c:	20000000 	.word	0x20000000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e021      	b.n	80013b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_InitTick+0x64>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fef7 	bl	800317e <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f001 fec1 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x68>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000160 	.word	0x20000160

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000160 	.word	0x20000160

0800140c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetREVID+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0c1b      	lsrs	r3, r3, #16
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	5c001000 	.word	0x5c001000

08001424 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	58000400 	.word	0x58000400

08001450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3360      	adds	r3, #96	; 0x60
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	611a      	str	r2, [r3, #16]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800152a:	b480      	push	{r7}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3360      	adds	r3, #96	; 0x60
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
  }
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3330      	adds	r3, #48	; 0x30
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	4413      	add	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	211f      	movs	r1, #31
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	401a      	ands	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0e9b      	lsrs	r3, r3, #26
 80015be:	f003 011f 	and.w	r1, r3, #31
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f023 0203 	bic.w	r2, r3, #3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3314      	adds	r3, #20
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	0e5b      	lsrs	r3, r3, #25
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0d1b      	lsrs	r3, r3, #20
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	2107      	movs	r1, #7
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	0d1b      	lsrs	r3, r3, #20
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	431a      	orrs	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0318 	and.w	r3, r3, #24
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016a4:	40d9      	lsrs	r1, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	400b      	ands	r3, r1
 80016aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	000fffff 	.word	0x000fffff

080016c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 031f 	and.w	r3, r3, #31
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <LL_ADC_DisableDeepPowerDown+0x20>)
 800170e:	4013      	ands	r3, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6093      	str	r3, [r2, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	5fffffc0 	.word	0x5fffffc0

08001724 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001738:	d101      	bne.n	800173e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_ADC_EnableInternalRegulator+0x24>)
 800175a:	4013      	ands	r3, r2
 800175c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	6fffffc0 	.word	0x6fffffc0

08001774 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001788:	d101      	bne.n	800178e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <LL_ADC_Enable+0x24>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	7fffffc0 	.word	0x7fffffc0

080017c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LL_ADC_Disable+0x24>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	f043 0202 	orr.w	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	7fffffc0 	.word	0x7fffffc0

080017ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <LL_ADC_IsEnabled+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_IsEnabled+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d101      	bne.n	800182a <LL_ADC_IsDisableOngoing+0x18>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_IsDisableOngoing+0x1a>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <LL_ADC_REG_StartConversion+0x24>)
 8001846:	4013      	ands	r3, r2
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	7fffffc0 	.word	0x7fffffc0

08001860 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b04      	cmp	r3, #4
 8001872:	d101      	bne.n	8001878 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b08      	cmp	r3, #8
 8001898:	d101      	bne.n	800189e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e18e      	b.n	8001be4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff faed 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff19 	bl	8001724 <LL_ADC_IsDeepPowerDownEnabled>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff feff 	bl	8001700 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff34 	bl	8001774 <LL_ADC_IsInternalRegulatorEnabled>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d114      	bne.n	800193c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff18 	bl	800174c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800191c:	4b9a      	ldr	r3, [pc, #616]	; (8001b88 <HAL_ADC_Init+0x2dc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	4a9a      	ldr	r2, [pc, #616]	; (8001b8c <HAL_ADC_Init+0x2e0>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	3301      	adds	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800192e:	e002      	b.n	8001936 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3b01      	subs	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff17 	bl	8001774 <LL_ADC_IsInternalRegulatorEnabled>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10d      	bne.n	8001968 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	f043 0210 	orr.w	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff77 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 8001972:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 8128 	bne.w	8001bd2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 8124 	bne.w	8001bd2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff24 	bl	80017ec <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d136      	bne.n	8001a18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a78      	ldr	r2, [pc, #480]	; (8001b90 <HAL_ADC_Init+0x2e4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_ADC_Init+0x112>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a76      	ldr	r2, [pc, #472]	; (8001b94 <HAL_ADC_Init+0x2e8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10e      	bne.n	80019dc <HAL_ADC_Init+0x130>
 80019be:	4874      	ldr	r0, [pc, #464]	; (8001b90 <HAL_ADC_Init+0x2e4>)
 80019c0:	f7ff ff14 	bl	80017ec <LL_ADC_IsEnabled>
 80019c4:	4604      	mov	r4, r0
 80019c6:	4873      	ldr	r0, [pc, #460]	; (8001b94 <HAL_ADC_Init+0x2e8>)
 80019c8:	f7ff ff10 	bl	80017ec <LL_ADC_IsEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4323      	orrs	r3, r4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e008      	b.n	80019ee <HAL_ADC_Init+0x142>
 80019dc:	486e      	ldr	r0, [pc, #440]	; (8001b98 <HAL_ADC_Init+0x2ec>)
 80019de:	f7ff ff05 	bl	80017ec <LL_ADC_IsEnabled>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_ADC_Init+0x2e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x15a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a64      	ldr	r2, [pc, #400]	; (8001b94 <HAL_ADC_Init+0x2e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x15e>
 8001a06:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_ADC_Init+0x2f0>)
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_Init+0x160>
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_ADC_Init+0x2f4>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff fd1c 	bl	8001450 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a18:	f7ff fcf8 	bl	800140c <HAL_GetREVID>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d914      	bls.n	8001a50 <HAL_ADC_Init+0x1a4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d110      	bne.n	8001a50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7d5b      	ldrb	r3, [r3, #21]
 8001a32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a48:	f043 030c 	orr.w	r3, r3, #12
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e00d      	b.n	8001a6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7d5b      	ldrb	r3, [r3, #21]
 8001a54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7f1b      	ldrb	r3, [r3, #28]
 8001a66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	045b      	lsls	r3, r3, #17
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_ADC_Init+0x2f8>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fed2 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 8001abc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fedf 	bl	8001886 <LL_ADC_INJ_IsConversionOngoing>
 8001ac8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d14a      	bne.n	8001b66 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d147      	bne.n	8001b66 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7d1b      	ldrb	r3, [r3, #20]
 8001ada:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_ADC_Init+0x2fc>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11b      	bne.n	8001b3a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_ADC_Init+0x300>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b16:	3a01      	subs	r2, #1
 8001b18:	0411      	lsls	r1, r2, #16
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b24:	4311      	orrs	r1, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	e007      	b.n	8001b4a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 f837 	bl	8002bd4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d120      	bne.n	8001bb0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f023 010f 	bic.w	r1, r3, #15
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
 8001b86:	e01b      	b.n	8001bc0 <HAL_ADC_Init+0x314>
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	053e2d63 	.word	0x053e2d63
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022100 	.word	0x40022100
 8001b98:	58026000 	.word	0x58026000
 8001b9c:	40022300 	.word	0x40022300
 8001ba0:	58026300 	.word	0x58026300
 8001ba4:	fff0c003 	.word	0xfff0c003
 8001ba8:	ffffbffc 	.word	0xffffbffc
 8001bac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020f 	bic.w	r2, r2, #15
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3724      	adds	r7, #36	; 0x24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_ADC_Start_DMA+0x168>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_ADC_Start_DMA+0x20>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_ADC_Start_DMA+0x16c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x24>
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_ADC_Start_DMA+0x170>)
 8001c0e:	e000      	b.n	8001c12 <HAL_ADC_Start_DMA+0x26>
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_ADC_Start_DMA+0x174>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fd58 	bl	80016c8 <LL_ADC_GetMultimode>
 8001c18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe1e 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 808c 	bne.w	8001d44 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Start_DMA+0x4e>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e087      	b.n	8001d4a <HAL_ADC_Start_DMA+0x15e>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d002      	beq.n	8001c54 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	d170      	bne.n	8001d36 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fe3f 	bl	80028d8 <ADC_Enable>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d163      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_ADC_Start_DMA+0x178>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <HAL_ADC_Start_DMA+0x16c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Start_DMA+0x98>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Start_DMA+0x9a>
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_ADC_Start_DMA+0x168>)
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d002      	beq.n	8001c94 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f023 0206 	bic.w	r2, r3, #6
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <HAL_ADC_Start_DMA+0x17c>)
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <HAL_ADC_Start_DMA+0x180>)
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <HAL_ADC_Start_DMA+0x184>)
 8001cd6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	221c      	movs	r2, #28
 8001cde:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0210 	orr.w	r2, r2, #16
 8001cf6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff fc6b 	bl	80015de <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3340      	adds	r3, #64	; 0x40
 8001d12:	4619      	mov	r1, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f001 fd9a 	bl	8003850 <HAL_DMA_Start_IT>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd87 	bl	8001838 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d2a:	e00d      	b.n	8001d48 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d34:	e008      	b.n	8001d48 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d42:	e001      	b.n	8001d48 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
 8001d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40022100 	.word	0x40022100
 8001d5c:	40022300 	.word	0x40022300
 8001d60:	58026300 	.word	0x58026300
 8001d64:	fffff0fe 	.word	0xfffff0fe
 8001d68:	08002aab 	.word	0x08002aab
 8001d6c:	08002b83 	.word	0x08002b83
 8001d70:	08002b9f 	.word	0x08002b9f

08001d74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_ADC_IRQHandler+0x240>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x30>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a86      	ldr	r2, [pc, #536]	; (8001fb8 <HAL_ADC_IRQHandler+0x244>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x34>
 8001da4:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <HAL_ADC_IRQHandler+0x248>)
 8001da6:	e000      	b.n	8001daa <HAL_ADC_IRQHandler+0x36>
 8001da8:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_ADC_IRQHandler+0x24c>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fc8c 	bl	80016c8 <LL_ADC_GetMultimode>
 8001db0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <HAL_ADC_IRQHandler+0x78>
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f001 f8c0 	bl	8002f64 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x8c>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8083 	beq.w	8001f12 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d07d      	beq.n	8001f12 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fb94 	bl	8001560 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d062      	beq.n	8001f04 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5d      	ldr	r2, [pc, #372]	; (8001fb8 <HAL_ADC_IRQHandler+0x244>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d002      	beq.n	8001e4e <HAL_ADC_IRQHandler+0xda>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	e000      	b.n	8001e50 <HAL_ADC_IRQHandler+0xdc>
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_ADC_IRQHandler+0x240>)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d008      	beq.n	8001e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d002      	beq.n	8001e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d104      	bne.n	8001e74 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	e00c      	b.n	8001e8e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4f      	ldr	r2, [pc, #316]	; (8001fb8 <HAL_ADC_IRQHandler+0x244>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d002      	beq.n	8001e84 <HAL_ADC_IRQHandler+0x110>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e000      	b.n	8001e86 <HAL_ADC_IRQHandler+0x112>
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_ADC_IRQHandler+0x240>)
 8001e86:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d135      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d12e      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fcd8 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11a      	bne.n	8001eec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 020c 	bic.w	r2, r2, #12
 8001ec4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d112      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8001eea:	e00b      	b.n	8001f04 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f96f 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_ADC_IRQHandler+0x1b2>
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10b      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a0 	beq.w	8002072 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 809a 	beq.w	8002072 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fb52 	bl	8001604 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f60:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fafa 	bl	8001560 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f6c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_ADC_IRQHandler+0x244>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x20a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_IRQHandler+0x20c>
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_ADC_IRQHandler+0x240>)
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d008      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d002      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d104      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	e014      	b.n	8001fce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_ADC_IRQHandler+0x244>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00a      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0x250>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e008      	b.n	8001fc6 <HAL_ADC_IRQHandler+0x252>
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40022100 	.word	0x40022100
 8001fbc:	40022300 	.word	0x40022300
 8001fc0:	58026300 	.word	0x58026300
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_ADC_IRQHandler+0x464>)
 8001fc6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d047      	beq.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_ADC_IRQHandler+0x27a>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03f      	beq.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d13a      	bne.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b40      	cmp	r3, #64	; 0x40
 8001ffa:	d133      	bne.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12e      	bne.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fc3b 	bl	8001886 <LL_ADC_INJ_IsConversionOngoing>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11a      	bne.n	800204c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002024:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
 800204a:	e00b      	b.n	8002064 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 ff55 	bl	8002f14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2260      	movs	r2, #96	; 0x60
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d011      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x32c>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8bc 	bl	8002210 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x35c>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 ff3b 	bl	8002f3c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_ADC_IRQHandler+0x38c>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 ff2d 	bl	8002f50 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d043      	beq.n	8002192 <HAL_ADC_IRQHandler+0x41e>
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03e      	beq.n	8002192 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	e021      	b.n	8002166 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <HAL_ADC_IRQHandler+0x464>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <HAL_ADC_IRQHandler+0x3c8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_ADC_IRQHandler+0x468>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_ADC_IRQHandler+0x3cc>
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_ADC_IRQHandler+0x46c>)
 800213e:	e000      	b.n	8002142 <HAL_ADC_IRQHandler+0x3ce>
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_ADC_IRQHandler+0x470>)
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff face 	bl	80016e4 <LL_ADC_GetMultiDMATransfer>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800214e:	2301      	movs	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e008      	b.n	8002166 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002162:	2301      	movs	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10e      	bne.n	800218a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f84d 	bl	8002224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2210      	movs	r2, #16
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d018      	beq.n	80021ce <HAL_ADC_IRQHandler+0x45a>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d013      	beq.n	80021ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f043 0208 	orr.w	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fead 	bl	8002f28 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40022100 	.word	0x40022100
 80021e0:	40022300 	.word	0x40022300
 80021e4:	58026300 	.word	0x58026300

080021e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b0a1      	sub	sp, #132	; 0x84
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a9d      	ldr	r2, [pc, #628]	; (80024c8 <HAL_ADC_ConfigChannel+0x290>)
 8002252:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x2a>
 800225e:	2302      	movs	r3, #2
 8002260:	e321      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x66e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff faf6 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 8306 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <HAL_ADC_ConfigChannel+0x62>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2201      	movs	r2, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	e016      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x90>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80022b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	69d1      	ldr	r1, [r2, #28]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	430b      	orrs	r3, r1
 80022d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7ff f94f 	bl	8001586 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fab7 	bl	8001860 <LL_ADC_REG_IsConversionOngoing>
 80022f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fac4 	bl	8001886 <LL_ADC_INJ_IsConversionOngoing>
 80022fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80b3 	bne.w	800246e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80af 	bne.w	800246e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	461a      	mov	r2, r3
 800231e:	f7ff f984 	bl	800162a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_ADC_ConfigChannel+0x294>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800232a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x110>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	e01d      	b.n	8002384 <HAL_ADC_ConfigChannel+0x14c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <HAL_ADC_ConfigChannel+0x136>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	e00a      	b.n	8002384 <HAL_ADC_ConfigChannel+0x14c>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d027      	beq.n	80023de <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	f7ff f88c 	bl	80014b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	7e5b      	ldrb	r3, [r3, #25]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x17e>
 80023b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x180>
 80023b6:	2300      	movs	r3, #0
 80023b8:	461a      	mov	r2, r3
 80023ba:	f7ff f8b6 	bl	800152a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7e1b      	ldrb	r3, [r3, #24]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x19c>
 80023ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x19e>
 80023d4:	2300      	movs	r3, #0
 80023d6:	461a      	mov	r2, r3
 80023d8:	f7ff f88e 	bl	80014f8 <LL_ADC_SetDataRightShift>
 80023dc:	e047      	b.n	800246e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	069b      	lsls	r3, r3, #26
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d107      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002400:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	429a      	cmp	r2, r3
 8002414:	d107      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002424:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	429a      	cmp	r2, r3
 8002438:	d107      	bne.n	800244a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002448:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	429a      	cmp	r2, r3
 800245c:	d107      	bne.n	800246e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800246c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f9ba 	bl	80017ec <LL_ADC_IsEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 820d 	bne.w	800289a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff f8f7 	bl	8001680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_ADC_ConfigChannel+0x290>)
 8002498:	4293      	cmp	r3, r2
 800249a:	f040 8133 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d110      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x298>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	bf94      	ite	ls
 80024be:	2301      	movls	r3, #1
 80024c0:	2300      	movhi	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	e01e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x2cc>
 80024c6:	bf00      	nop
 80024c8:	47ff0000 	.word	0x47ff0000
 80024cc:	5c001000 	.word	0x5c001000
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	bf94      	ite	ls
 80024fe:	2301      	movls	r3, #1
 8002500:	2300      	movhi	r3, #0
 8002502:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002504:	2b00      	cmp	r3, #0
 8002506:	d079      	beq.n	80025fc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x2ec>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	069b      	lsls	r3, r3, #26
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	e015      	b.n	8002550 <HAL_ADC_ConfigChannel+0x318>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002534:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x338>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	e017      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x368>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002580:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	ea42 0103 	orr.w	r1, r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x38e>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	3301      	adds	r3, #1
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	e018      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x3c0>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e003      	b.n	80025ea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f8:	430b      	orrs	r3, r1
 80025fa:	e07e      	b.n	80026fa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x3e0>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	069b      	lsls	r3, r3, #26
 8002612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002616:	e015      	b.n	8002644 <HAL_ADC_ConfigChannel+0x40c>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	069b      	lsls	r3, r3, #26
 8002640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x42c>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	e017      	b.n	8002694 <HAL_ADC_ConfigChannel+0x45c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	61bb      	str	r3, [r7, #24]
  return result;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	ea42 0103 	orr.w	r1, r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x488>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	3b1e      	subs	r3, #30
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026be:	e01b      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x4c0>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	60fb      	str	r3, [r7, #12]
  return result;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	051b      	lsls	r3, r3, #20
 80026f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f8:	430b      	orrs	r3, r1
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	4619      	mov	r1, r3
 8002700:	f7fe ff93 	bl	800162a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f280 80c6 	bge.w	800289a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a67      	ldr	r2, [pc, #412]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x4ea>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x4ee>
 8002722:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <HAL_ADC_ConfigChannel+0x680>)
 8002724:	e000      	b.n	8002728 <HAL_ADC_ConfigChannel+0x4f0>
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_ADC_ConfigChannel+0x684>)
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe feb7 	bl	800149c <LL_ADC_GetCommonPathInternalCh>
 800272e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x50c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10e      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x52a>
 8002744:	485a      	ldr	r0, [pc, #360]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 8002746:	f7ff f851 	bl	80017ec <LL_ADC_IsEnabled>
 800274a:	4604      	mov	r4, r0
 800274c:	4859      	ldr	r0, [pc, #356]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 800274e:	f7ff f84d 	bl	80017ec <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	4323      	orrs	r3, r4
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	e008      	b.n	8002774 <HAL_ADC_ConfigChannel+0x53c>
 8002762:	4857      	ldr	r0, [pc, #348]	; (80028c0 <HAL_ADC_ConfigChannel+0x688>)
 8002764:	f7ff f842 	bl	80017ec <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d07d      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_ADC_ConfigChannel+0x68c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d130      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x5ac>
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d12b      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a4b      	ldr	r2, [pc, #300]	; (80028c0 <HAL_ADC_ConfigChannel+0x688>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 8081 	bne.w	800289a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a44      	ldr	r2, [pc, #272]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x574>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x578>
 80027ac:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <HAL_ADC_ConfigChannel+0x680>)
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x57a>
 80027b0:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_ADC_ConfigChannel+0x684>)
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe fe5b 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_ADC_ConfigChannel+0x690>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_ADC_ConfigChannel+0x694>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027d4:	e002      	b.n	80027dc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f9      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e2:	e05a      	b.n	800289a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_ADC_ConfigChannel+0x698>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11e      	bne.n	800282c <HAL_ADC_ConfigChannel+0x5f4>
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d119      	bne.n	800282c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_ADC_ConfigChannel+0x688>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d14b      	bne.n	800289a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2a      	ldr	r2, [pc, #168]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x5de>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x5e2>
 8002816:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_ADC_ConfigChannel+0x680>)
 8002818:	e000      	b.n	800281c <HAL_ADC_ConfigChannel+0x5e4>
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_ADC_ConfigChannel+0x684>)
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7fe fe26 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800282a:	e036      	b.n	800289a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_ADC_ConfigChannel+0x69c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d131      	bne.n	800289a <HAL_ADC_ConfigChannel+0x662>
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d12c      	bne.n	800289a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_ADC_ConfigChannel+0x688>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d127      	bne.n	800289a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_ADC_ConfigChannel+0x678>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_ADC_ConfigChannel+0x626>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_ADC_ConfigChannel+0x67c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x62a>
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_ADC_ConfigChannel+0x680>)
 8002860:	e000      	b.n	8002864 <HAL_ADC_ConfigChannel+0x62c>
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_ADC_ConfigChannel+0x684>)
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f7fe fe02 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
 8002872:	e012      	b.n	800289a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002886:	e008      	b.n	800289a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3784      	adds	r7, #132	; 0x84
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40022100 	.word	0x40022100
 80028b8:	40022300 	.word	0x40022300
 80028bc:	58026300 	.word	0x58026300
 80028c0:	58026000 	.word	0x58026000
 80028c4:	cb840000 	.word	0xcb840000
 80028c8:	20000000 	.word	0x20000000
 80028cc:	053e2d63 	.word	0x053e2d63
 80028d0:	c7520000 	.word	0xc7520000
 80028d4:	cfb80000 	.word	0xcfb80000

080028d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe ff81 	bl	80017ec <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d16e      	bne.n	80029ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <ADC_Enable+0x100>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f043 0210 	orr.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e05a      	b.n	80029d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ff3c 	bl	800179c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002924:	f7fe fd66 	bl	80013f4 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <ADC_Enable+0x104>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <ADC_Enable+0x66>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <ADC_Enable+0x108>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <ADC_Enable+0x6a>
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <ADC_Enable+0x10c>)
 8002940:	e000      	b.n	8002944 <ADC_Enable+0x6c>
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <ADC_Enable+0x110>)
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe febf 	bl	80016c8 <LL_ADC_GetMultimode>
 800294a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <ADC_Enable+0x108>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d002      	beq.n	800295c <ADC_Enable+0x84>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e000      	b.n	800295e <ADC_Enable+0x86>
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <ADC_Enable+0x104>)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4293      	cmp	r3, r2
 8002964:	d02c      	beq.n	80029c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d130      	bne.n	80029ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296c:	e028      	b.n	80029c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe ff3a 	bl	80017ec <LL_ADC_IsEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d104      	bne.n	8002988 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff0a 	bl	800179c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002988:	f7fe fd34 	bl	80013f4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d914      	bls.n	80029c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d00d      	beq.n	80029c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d1cf      	bne.n	800296e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	8000003f 	.word	0x8000003f
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40022100 	.word	0x40022100
 80029e4:	40022300 	.word	0x40022300
 80029e8:	58026300 	.word	0x58026300

080029ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe ff0a 	bl	8001812 <LL_ADC_IsDisableOngoing>
 80029fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fef1 	bl	80017ec <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d047      	beq.n	8002aa0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d144      	bne.n	8002aa0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030d 	and.w	r3, r3, #13
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10c      	bne.n	8002a3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fecb 	bl	80017c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2203      	movs	r2, #3
 8002a34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fcdd 	bl	80013f4 <HAL_GetTick>
 8002a3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a3c:	e029      	b.n	8002a92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e023      	b.n	8002aa2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a5a:	f7fe fccb 	bl	80013f4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d914      	bls.n	8002a92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0210 	orr.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1dc      	bne.n	8002a5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d14b      	bne.n	8002b5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d021      	beq.n	8002b22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fd3c 	bl	8001560 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d032      	beq.n	8002b54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d12b      	bne.n	8002b54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11f      	bne.n	8002b54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b20:	e018      	b.n	8002b54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fb47 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b5a:	e00e      	b.n	8002b7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fb5b 	bl	8002224 <HAL_ADC_ErrorCallback>
}
 8002b6e:	e004      	b.n	8002b7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff fb33 	bl	80021fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fb2d 	bl	8002224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <ADC_ConfigureBoostMode+0x1f4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <ADC_ConfigureBoostMode+0x1c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a78      	ldr	r2, [pc, #480]	; (8002dcc <ADC_ConfigureBoostMode+0x1f8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <ADC_ConfigureBoostMode+0x30>
 8002bf0:	4b77      	ldr	r3, [pc, #476]	; (8002dd0 <ADC_ConfigureBoostMode+0x1fc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e008      	b.n	8002c16 <ADC_ConfigureBoostMode+0x42>
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <ADC_ConfigureBoostMode+0x200>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01c      	beq.n	8002c54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c1a:	f003 fd0f 	bl	800663c <HAL_RCC_GetHCLKFreq>
 8002c1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c28:	d010      	beq.n	8002c4c <ADC_ConfigureBoostMode+0x78>
 8002c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c2e:	d871      	bhi.n	8002d14 <ADC_ConfigureBoostMode+0x140>
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d002      	beq.n	8002c3c <ADC_ConfigureBoostMode+0x68>
 8002c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3a:	d16b      	bne.n	8002d14 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	60fb      	str	r3, [r7, #12]
        break;
 8002c4a:	e066      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	60fb      	str	r3, [r7, #12]
        break;
 8002c52:	e062      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c58:	f004 fc60 	bl	800751c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c66:	d051      	beq.n	8002d0c <ADC_ConfigureBoostMode+0x138>
 8002c68:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c6c:	d854      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002c6e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c72:	d047      	beq.n	8002d04 <ADC_ConfigureBoostMode+0x130>
 8002c74:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c78:	d84e      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002c7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c7e:	d03d      	beq.n	8002cfc <ADC_ConfigureBoostMode+0x128>
 8002c80:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c84:	d848      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c8a:	d033      	beq.n	8002cf4 <ADC_ConfigureBoostMode+0x120>
 8002c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c90:	d842      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002c92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c96:	d029      	beq.n	8002cec <ADC_ConfigureBoostMode+0x118>
 8002c98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c9c:	d83c      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002c9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ca2:	d01a      	beq.n	8002cda <ADC_ConfigureBoostMode+0x106>
 8002ca4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ca8:	d836      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002caa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cae:	d014      	beq.n	8002cda <ADC_ConfigureBoostMode+0x106>
 8002cb0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cb4:	d830      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cba:	d00e      	beq.n	8002cda <ADC_ConfigureBoostMode+0x106>
 8002cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc0:	d82a      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002cc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cc6:	d008      	beq.n	8002cda <ADC_ConfigureBoostMode+0x106>
 8002cc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ccc:	d824      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x144>
 8002cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd2:	d002      	beq.n	8002cda <ADC_ConfigureBoostMode+0x106>
 8002cd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cd8:	d11e      	bne.n	8002d18 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e016      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
        break;
 8002cf2:	e012      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	60fb      	str	r3, [r7, #12]
        break;
 8002cfa:	e00e      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	60fb      	str	r3, [r7, #12]
        break;
 8002d02:	e00a      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	09db      	lsrs	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
        break;
 8002d0a:	e006      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	60fb      	str	r3, [r7, #12]
        break;
 8002d12:	e002      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
        break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002d18:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d1a:	f7fe fb77 	bl	800140c <HAL_GetREVID>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d815      	bhi.n	8002d54 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <ADC_ConfigureBoostMode+0x204>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d908      	bls.n	8002d42 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d40:	e03e      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	e035      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <ADC_ConfigureBoostMode+0x208>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d808      	bhi.n	8002d74 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d70:	609a      	str	r2, [r3, #8]
}
 8002d72:	e025      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <ADC_ConfigureBoostMode+0x20c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d80a      	bhi.n	8002d92 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	e016      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <ADC_ConfigureBoostMode+0x210>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d80a      	bhi.n	8002db0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	e007      	b.n	8002dc0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002dbe:	609a      	str	r2, [r3, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40022100 	.word	0x40022100
 8002dd0:	40022300 	.word	0x40022300
 8002dd4:	58026300 	.word	0x58026300
 8002dd8:	01312d00 	.word	0x01312d00
 8002ddc:	005f5e10 	.word	0x005f5e10
 8002de0:	00bebc20 	.word	0x00bebc20
 8002de4:	017d7840 	.word	0x017d7840

08002de8 <LL_ADC_StartCalibration>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <LL_ADC_StartCalibration+0x38>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	3ffeffc0 	.word	0x3ffeffc0

08002e24 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e38:	d101      	bne.n	8002e3e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADCEx_Calibration_Start+0x1e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e04c      	b.n	8002f04 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fdba 	bl	80029ec <ADC_Disable>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d135      	bne.n	8002eee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ffa4 	bl	8002de8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ea0:	e014      	b.n	8002ecc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d30d      	bcc.n	8002ecc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f023 0312 	bic.w	r3, r3, #18
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01b      	b.n	8002f04 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ffa7 	bl	8002e24 <LL_ADC_IsCalibrationOnGoing>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e2      	bne.n	8002ea2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f023 0303 	bic.w	r3, r3, #3
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
 8002eec:	e005      	b.n	8002efa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	ffffeefd 	.word	0xffffeefd
 8002f10:	25c3f800 	.word	0x25c3f800

08002f14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00
 8002fbc:	05fa0000 	.word	0x05fa0000

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff40 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff90 	bl	800306c <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5f 	bl	8003018 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff33 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa4 	bl	80030d4 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7fe f928 	bl	80013f4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e316      	b.n	80037de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a66      	ldr	r2, [pc, #408]	; (8003350 <HAL_DMA_Init+0x1b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_DMA_Init+0x1bc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a63      	ldr	r2, [pc, #396]	; (8003358 <HAL_DMA_Init+0x1c0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a62      	ldr	r2, [pc, #392]	; (800335c <HAL_DMA_Init+0x1c4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_DMA_Init+0x1c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5f      	ldr	r2, [pc, #380]	; (8003364 <HAL_DMA_Init+0x1cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <HAL_DMA_Init+0x1d0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5c      	ldr	r2, [pc, #368]	; (800336c <HAL_DMA_Init+0x1d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5a      	ldr	r2, [pc, #360]	; (8003370 <HAL_DMA_Init+0x1d8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a59      	ldr	r2, [pc, #356]	; (8003374 <HAL_DMA_Init+0x1dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a57      	ldr	r2, [pc, #348]	; (8003378 <HAL_DMA_Init+0x1e0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a56      	ldr	r2, [pc, #344]	; (800337c <HAL_DMA_Init+0x1e4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a54      	ldr	r2, [pc, #336]	; (8003380 <HAL_DMA_Init+0x1e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_DMA_Init+0x1ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a51      	ldr	r2, [pc, #324]	; (8003388 <HAL_DMA_Init+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_Init+0xb8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a50      	ldr	r2, [pc, #320]	; (800338c <HAL_DMA_Init+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Init+0xbc>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_DMA_Init+0xbe>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 813b 	beq.w	80034d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_DMA_Init+0x1b8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d04a      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <HAL_DMA_Init+0x1bc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d045      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_DMA_Init+0x1c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d040      	beq.n	800330c <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_DMA_Init+0x1c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d03b      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_DMA_Init+0x1c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d036      	beq.n	800330c <HAL_DMA_Init+0x174>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <HAL_DMA_Init+0x1cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d031      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_DMA_Init+0x1d0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02c      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_DMA_Init+0x1d4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d027      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_DMA_Init+0x1d8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_DMA_Init+0x1dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d01d      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_DMA_Init+0x1e0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMA_Init+0x1e4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <HAL_DMA_Init+0x1e8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_DMA_Init+0x1ec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_DMA_Init+0x174>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_DMA_Init+0x1f0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_DMA_Init+0x174>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_DMA_Init+0x1f4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_DMA_Init+0x186>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e007      	b.n	800332e <HAL_DMA_Init+0x196>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800332e:	e02f      	b.n	8003390 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003330:	f7fe f860 	bl	80013f4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d928      	bls.n	8003390 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e246      	b.n	80037de <HAL_DMA_Init+0x646>
 8003350:	40020010 	.word	0x40020010
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020058 	.word	0x40020058
 8003360:	40020070 	.word	0x40020070
 8003364:	40020088 	.word	0x40020088
 8003368:	400200a0 	.word	0x400200a0
 800336c:	400200b8 	.word	0x400200b8
 8003370:	40020410 	.word	0x40020410
 8003374:	40020428 	.word	0x40020428
 8003378:	40020440 	.word	0x40020440
 800337c:	40020458 	.word	0x40020458
 8003380:	40020470 	.word	0x40020470
 8003384:	40020488 	.word	0x40020488
 8003388:	400204a0 	.word	0x400204a0
 800338c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1c8      	bne.n	8003330 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4b83      	ldr	r3, [pc, #524]	; (80035b8 <HAL_DMA_Init+0x420>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d107      	bne.n	80033f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4313      	orrs	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033f4:	4b71      	ldr	r3, [pc, #452]	; (80035bc <HAL_DMA_Init+0x424>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_DMA_Init+0x428>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003400:	d328      	bcc.n	8003454 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b28      	cmp	r3, #40	; 0x28
 8003408:	d903      	bls.n	8003412 <HAL_DMA_Init+0x27a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b2e      	cmp	r3, #46	; 0x2e
 8003410:	d917      	bls.n	8003442 <HAL_DMA_Init+0x2aa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b3e      	cmp	r3, #62	; 0x3e
 8003418:	d903      	bls.n	8003422 <HAL_DMA_Init+0x28a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b42      	cmp	r3, #66	; 0x42
 8003420:	d90f      	bls.n	8003442 <HAL_DMA_Init+0x2aa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b46      	cmp	r3, #70	; 0x46
 8003428:	d903      	bls.n	8003432 <HAL_DMA_Init+0x29a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b48      	cmp	r3, #72	; 0x48
 8003430:	d907      	bls.n	8003442 <HAL_DMA_Init+0x2aa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b4e      	cmp	r3, #78	; 0x4e
 8003438:	d905      	bls.n	8003446 <HAL_DMA_Init+0x2ae>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b52      	cmp	r3, #82	; 0x52
 8003440:	d801      	bhi.n	8003446 <HAL_DMA_Init+0x2ae>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_DMA_Init+0x2b0>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003452:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0307 	bic.w	r3, r3, #7
 800346a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b04      	cmp	r3, #4
 800347c:	d117      	bne.n	80034ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f001 fdcf 	bl	8005034 <DMA_CheckFifoParam>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e197      	b.n	80037de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fd0a 	bl	8004ed0 <DMA_CalcBaseAndBitshift>
 80034bc:	4603      	mov	r3, r0
 80034be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	223f      	movs	r2, #63	; 0x3f
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	e0cd      	b.n	800366e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <HAL_DMA_Init+0x42c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <HAL_DMA_Init+0x430>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_DMA_Init+0x434>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_DMA_Init+0x438>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a35      	ldr	r2, [pc, #212]	; (80035d4 <HAL_DMA_Init+0x43c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <HAL_DMA_Init+0x440>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <HAL_DMA_Init+0x444>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_Init+0x38a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <HAL_DMA_Init+0x448>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_DMA_Init+0x38e>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_DMA_Init+0x390>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8097 	beq.w	800365c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <HAL_DMA_Init+0x42c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d021      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_DMA_Init+0x430>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01c      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_DMA_Init+0x434>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d017      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_DMA_Init+0x438>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d012      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_DMA_Init+0x43c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00d      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_DMA_Init+0x440>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d008      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_DMA_Init+0x444>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <HAL_DMA_Init+0x3e4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_DMA_Init+0x448>)
 800357a:	4293      	cmp	r3, r2
 800357c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_DMA_Init+0x44c>)
 800359a:	4013      	ands	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d020      	beq.n	80035e8 <HAL_DMA_Init+0x450>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d102      	bne.n	80035b4 <HAL_DMA_Init+0x41c>
 80035ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b2:	e01a      	b.n	80035ea <HAL_DMA_Init+0x452>
 80035b4:	2300      	movs	r3, #0
 80035b6:	e018      	b.n	80035ea <HAL_DMA_Init+0x452>
 80035b8:	fe10803f 	.word	0xfe10803f
 80035bc:	5c001000 	.word	0x5c001000
 80035c0:	ffff0000 	.word	0xffff0000
 80035c4:	58025408 	.word	0x58025408
 80035c8:	5802541c 	.word	0x5802541c
 80035cc:	58025430 	.word	0x58025430
 80035d0:	58025444 	.word	0x58025444
 80035d4:	58025458 	.word	0x58025458
 80035d8:	5802546c 	.word	0x5802546c
 80035dc:	58025480 	.word	0x58025480
 80035e0:	58025494 	.word	0x58025494
 80035e4:	fffe000f 	.word	0xfffe000f
 80035e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003618:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <HAL_DMA_Init+0x650>)
 8003630:	4413      	add	r3, r2
 8003632:	4a6e      	ldr	r2, [pc, #440]	; (80037ec <HAL_DMA_Init+0x654>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 fc45 	bl	8004ed0 <DMA_CalcBaseAndBitshift>
 8003646:	4603      	mov	r3, r0
 8003648:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e008      	b.n	800366e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0b7      	b.n	80037de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_DMA_Init+0x658>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d072      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_DMA_Init+0x65c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d06d      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMA_Init+0x660>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d068      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_DMA_Init+0x664>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d063      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_DMA_Init+0x668>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d05e      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_DMA_Init+0x66c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d059      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_DMA_Init+0x670>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d054      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a54      	ldr	r2, [pc, #336]	; (800380c <HAL_DMA_Init+0x674>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d04f      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_DMA_Init+0x678>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d04a      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_DMA_Init+0x67c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d045      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_DMA_Init+0x680>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4e      	ldr	r2, [pc, #312]	; (800381c <HAL_DMA_Init+0x684>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_DMA_Init+0x688>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_DMA_Init+0x68c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d031      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_DMA_Init+0x690>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a48      	ldr	r2, [pc, #288]	; (800382c <HAL_DMA_Init+0x694>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d027      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a47      	ldr	r2, [pc, #284]	; (8003830 <HAL_DMA_Init+0x698>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_DMA_Init+0x69c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a44      	ldr	r2, [pc, #272]	; (8003838 <HAL_DMA_Init+0x6a0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a42      	ldr	r2, [pc, #264]	; (800383c <HAL_DMA_Init+0x6a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a41      	ldr	r2, [pc, #260]	; (8003840 <HAL_DMA_Init+0x6a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3f      	ldr	r2, [pc, #252]	; (8003844 <HAL_DMA_Init+0x6ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3e      	ldr	r2, [pc, #248]	; (8003848 <HAL_DMA_Init+0x6b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_DMA_Init+0x5c6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3c      	ldr	r2, [pc, #240]	; (800384c <HAL_DMA_Init+0x6b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x5ca>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_DMA_Init+0x5cc>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d032      	beq.n	80037ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fcdf 	bl	800512c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d102      	bne.n	800377c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003790:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_DMA_Init+0x624>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d80c      	bhi.n	80037bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 fd5c 	bl	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e008      	b.n	80037ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	a7fdabf8 	.word	0xa7fdabf8
 80037ec:	cccccccd 	.word	0xcccccccd
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	58025408 	.word	0x58025408
 8003834:	5802541c 	.word	0x5802541c
 8003838:	58025430 	.word	0x58025430
 800383c:	58025444 	.word	0x58025444
 8003840:	58025458 	.word	0x58025458
 8003844:	5802546c 	.word	0x5802546c
 8003848:	58025480 	.word	0x58025480
 800384c:	58025494 	.word	0x58025494

08003850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e226      	b.n	8003cba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_DMA_Start_IT+0x2a>
 8003876:	2302      	movs	r3, #2
 8003878:	e21f      	b.n	8003cba <HAL_DMA_Start_IT+0x46a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 820a 	bne.w	8003ca4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_DMA_Start_IT+0x1f4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d04a      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <HAL_DMA_Start_IT+0x1f8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d045      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_DMA_Start_IT+0x1fc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d040      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a63      	ldr	r2, [pc, #396]	; (8003a50 <HAL_DMA_Start_IT+0x200>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d03b      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a62      	ldr	r2, [pc, #392]	; (8003a54 <HAL_DMA_Start_IT+0x204>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d036      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_DMA_Start_IT+0x208>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <HAL_DMA_Start_IT+0x20c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d02c      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_DMA_Start_IT+0x210>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d027      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5c      	ldr	r2, [pc, #368]	; (8003a64 <HAL_DMA_Start_IT+0x214>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d022      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_DMA_Start_IT+0x218>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01d      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a59      	ldr	r2, [pc, #356]	; (8003a6c <HAL_DMA_Start_IT+0x21c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d018      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_DMA_Start_IT+0x220>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_DMA_Start_IT+0x224>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <HAL_DMA_Start_IT+0x228>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a53      	ldr	r2, [pc, #332]	; (8003a7c <HAL_DMA_Start_IT+0x22c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_DMA_Start_IT+0xee>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <HAL_DMA_Start_IT+0x230>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <HAL_DMA_Start_IT+0x100>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e007      	b.n	8003960 <HAL_DMA_Start_IT+0x110>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f001 f906 	bl	8004b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <HAL_DMA_Start_IT+0x1f4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04a      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a33      	ldr	r2, [pc, #204]	; (8003a48 <HAL_DMA_Start_IT+0x1f8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d045      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <HAL_DMA_Start_IT+0x1fc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d040      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <HAL_DMA_Start_IT+0x200>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d03b      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <HAL_DMA_Start_IT+0x204>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d036      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2d      	ldr	r2, [pc, #180]	; (8003a58 <HAL_DMA_Start_IT+0x208>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d031      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <HAL_DMA_Start_IT+0x20c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02c      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <HAL_DMA_Start_IT+0x210>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d027      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_DMA_Start_IT+0x214>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <HAL_DMA_Start_IT+0x218>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <HAL_DMA_Start_IT+0x21c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <HAL_DMA_Start_IT+0x220>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <HAL_DMA_Start_IT+0x224>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <HAL_DMA_Start_IT+0x228>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_DMA_Start_IT+0x22c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_DMA_Start_IT+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_DMA_Start_IT+0x230>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_DMA_Start_IT+0x1c0>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_DMA_Start_IT+0x1c2>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d036      	beq.n	8003a84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 021e 	bic.w	r2, r3, #30
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0216 	orr.w	r2, r2, #22
 8003a28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03e      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0208 	orr.w	r2, r2, #8
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e035      	b.n	8003ab0 <HAL_DMA_Start_IT+0x260>
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020e 	bic.w	r2, r3, #14
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 020a 	orr.w	r2, r2, #10
 8003a96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0204 	orr.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_DMA_Start_IT+0x474>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d072      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a82      	ldr	r2, [pc, #520]	; (8003cc8 <HAL_DMA_Start_IT+0x478>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d06d      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_DMA_Start_IT+0x47c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d068      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7f      	ldr	r2, [pc, #508]	; (8003cd0 <HAL_DMA_Start_IT+0x480>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d063      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7d      	ldr	r2, [pc, #500]	; (8003cd4 <HAL_DMA_Start_IT+0x484>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d05e      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_DMA_Start_IT+0x488>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d059      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7a      	ldr	r2, [pc, #488]	; (8003cdc <HAL_DMA_Start_IT+0x48c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d054      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a79      	ldr	r2, [pc, #484]	; (8003ce0 <HAL_DMA_Start_IT+0x490>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04f      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a77      	ldr	r2, [pc, #476]	; (8003ce4 <HAL_DMA_Start_IT+0x494>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d04a      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a76      	ldr	r2, [pc, #472]	; (8003ce8 <HAL_DMA_Start_IT+0x498>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d045      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a74      	ldr	r2, [pc, #464]	; (8003cec <HAL_DMA_Start_IT+0x49c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d040      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a73      	ldr	r2, [pc, #460]	; (8003cf0 <HAL_DMA_Start_IT+0x4a0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d03b      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a71      	ldr	r2, [pc, #452]	; (8003cf4 <HAL_DMA_Start_IT+0x4a4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d036      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_DMA_Start_IT+0x4a8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d031      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_DMA_Start_IT+0x4ac>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d02c      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6d      	ldr	r2, [pc, #436]	; (8003d00 <HAL_DMA_Start_IT+0x4b0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d027      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <HAL_DMA_Start_IT+0x4b4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_DMA_Start_IT+0x4b8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01d      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_DMA_Start_IT+0x4bc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_DMA_Start_IT+0x4c0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_DMA_Start_IT+0x4c4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <HAL_DMA_Start_IT+0x4c8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a62      	ldr	r2, [pc, #392]	; (8003d1c <HAL_DMA_Start_IT+0x4cc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a61      	ldr	r2, [pc, #388]	; (8003d20 <HAL_DMA_Start_IT+0x4d0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Start_IT+0x354>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_DMA_Start_IT+0x356>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01a      	beq.n	8003be0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a37      	ldr	r2, [pc, #220]	; (8003cc4 <HAL_DMA_Start_IT+0x474>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d04a      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <HAL_DMA_Start_IT+0x478>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d045      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_DMA_Start_IT+0x47c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d040      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_DMA_Start_IT+0x480>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d03b      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_DMA_Start_IT+0x484>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d036      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <HAL_DMA_Start_IT+0x488>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d031      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <HAL_DMA_Start_IT+0x48c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02c      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <HAL_DMA_Start_IT+0x490>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d027      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <HAL_DMA_Start_IT+0x494>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_DMA_Start_IT+0x498>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <HAL_DMA_Start_IT+0x49c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <HAL_DMA_Start_IT+0x4a0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_DMA_Start_IT+0x4a4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <HAL_DMA_Start_IT+0x4a8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_DMA_Start_IT+0x4ac>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_Start_IT+0x430>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_DMA_Start_IT+0x4b0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d108      	bne.n	8003c92 <HAL_DMA_Start_IT+0x442>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e012      	b.n	8003cb8 <HAL_DMA_Start_IT+0x468>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e009      	b.n	8003cb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40020010 	.word	0x40020010
 8003cc8:	40020028 	.word	0x40020028
 8003ccc:	40020040 	.word	0x40020040
 8003cd0:	40020058 	.word	0x40020058
 8003cd4:	40020070 	.word	0x40020070
 8003cd8:	40020088 	.word	0x40020088
 8003cdc:	400200a0 	.word	0x400200a0
 8003ce0:	400200b8 	.word	0x400200b8
 8003ce4:	40020410 	.word	0x40020410
 8003ce8:	40020428 	.word	0x40020428
 8003cec:	40020440 	.word	0x40020440
 8003cf0:	40020458 	.word	0x40020458
 8003cf4:	40020470 	.word	0x40020470
 8003cf8:	40020488 	.word	0x40020488
 8003cfc:	400204a0 	.word	0x400204a0
 8003d00:	400204b8 	.word	0x400204b8
 8003d04:	58025408 	.word	0x58025408
 8003d08:	5802541c 	.word	0x5802541c
 8003d0c:	58025430 	.word	0x58025430
 8003d10:	58025444 	.word	0x58025444
 8003d14:	58025458 	.word	0x58025458
 8003d18:	5802546c 	.word	0x5802546c
 8003d1c:	58025480 	.word	0x58025480
 8003d20:	58025494 	.word	0x58025494

08003d24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_DMA_IRQHandler+0x1ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a67      	ldr	r2, [pc, #412]	; (8003ed4 <HAL_DMA_IRQHandler+0x1b0>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5f      	ldr	r2, [pc, #380]	; (8003ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a5d      	ldr	r2, [pc, #372]	; (8003edc <HAL_DMA_IRQHandler+0x1b8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5a      	ldr	r2, [pc, #360]	; (8003ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a59      	ldr	r2, [pc, #356]	; (8003ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a57      	ldr	r2, [pc, #348]	; (8003eec <HAL_DMA_IRQHandler+0x1c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a56      	ldr	r2, [pc, #344]	; (8003ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a54      	ldr	r2, [pc, #336]	; (8003ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a53      	ldr	r2, [pc, #332]	; (8003ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a51      	ldr	r2, [pc, #324]	; (8003efc <HAL_DMA_IRQHandler+0x1d8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a50      	ldr	r2, [pc, #320]	; (8003f00 <HAL_DMA_IRQHandler+0x1dc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4e      	ldr	r2, [pc, #312]	; (8003f04 <HAL_DMA_IRQHandler+0x1e0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4d      	ldr	r2, [pc, #308]	; (8003f08 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <HAL_DMA_IRQHandler+0x1e8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <HAL_DMA_IRQHandler+0x1ec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a48      	ldr	r2, [pc, #288]	; (8003f14 <HAL_DMA_IRQHandler+0x1f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_IRQHandler+0xd6>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_DMA_IRQHandler+0xd8>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 842b 	beq.w	8004658 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80a2 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2e      	ldr	r2, [pc, #184]	; (8003ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04a      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <HAL_DMA_IRQHandler+0x1b8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d045      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d040      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d03b      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d036      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_DMA_IRQHandler+0x1c8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d031      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d027      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d022      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_DMA_IRQHandler+0x1d8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_DMA_IRQHandler+0x1dc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_DMA_IRQHandler+0x1e0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_DMA_IRQHandler+0x1e4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_DMA_IRQHandler+0x1e8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_DMA_IRQHandler+0x1ec>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x194>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_DMA_IRQHandler+0x1f0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d12f      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x1f4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e02e      	b.n	8003f2c <HAL_DMA_IRQHandler+0x208>
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	1b4e81b5 	.word	0x1b4e81b5
 8003ed8:	40020010 	.word	0x40020010
 8003edc:	40020028 	.word	0x40020028
 8003ee0:	40020040 	.word	0x40020040
 8003ee4:	40020058 	.word	0x40020058
 8003ee8:	40020070 	.word	0x40020070
 8003eec:	40020088 	.word	0x40020088
 8003ef0:	400200a0 	.word	0x400200a0
 8003ef4:	400200b8 	.word	0x400200b8
 8003ef8:	40020410 	.word	0x40020410
 8003efc:	40020428 	.word	0x40020428
 8003f00:	40020440 	.word	0x40020440
 8003f04:	40020458 	.word	0x40020458
 8003f08:	40020470 	.word	0x40020470
 8003f0c:	40020488 	.word	0x40020488
 8003f10:	400204a0 	.word	0x400204a0
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2208      	movs	r2, #8
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06e      	beq.n	8004050 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a69      	ldr	r2, [pc, #420]	; (800411c <HAL_DMA_IRQHandler+0x3f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d04a      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a67      	ldr	r2, [pc, #412]	; (8004120 <HAL_DMA_IRQHandler+0x3fc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d045      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <HAL_DMA_IRQHandler+0x400>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a64      	ldr	r2, [pc, #400]	; (8004128 <HAL_DMA_IRQHandler+0x404>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d03b      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a63      	ldr	r2, [pc, #396]	; (800412c <HAL_DMA_IRQHandler+0x408>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d036      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a61      	ldr	r2, [pc, #388]	; (8004130 <HAL_DMA_IRQHandler+0x40c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a60      	ldr	r2, [pc, #384]	; (8004134 <HAL_DMA_IRQHandler+0x410>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d02c      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_DMA_IRQHandler+0x414>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d027      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5d      	ldr	r2, [pc, #372]	; (800413c <HAL_DMA_IRQHandler+0x418>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d022      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5b      	ldr	r2, [pc, #364]	; (8004140 <HAL_DMA_IRQHandler+0x41c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01d      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5a      	ldr	r2, [pc, #360]	; (8004144 <HAL_DMA_IRQHandler+0x420>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d018      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_DMA_IRQHandler+0x424>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_DMA_IRQHandler+0x428>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a55      	ldr	r2, [pc, #340]	; (8004150 <HAL_DMA_IRQHandler+0x42c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a54      	ldr	r2, [pc, #336]	; (8004154 <HAL_DMA_IRQHandler+0x430>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ee>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_DMA_IRQHandler+0x434>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d10a      	bne.n	8004028 <HAL_DMA_IRQHandler+0x304>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e003      	b.n	8004030 <HAL_DMA_IRQHandler+0x30c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0202 	orr.w	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 808f 	beq.w	8004184 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	; (800411c <HAL_DMA_IRQHandler+0x3f8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_DMA_IRQHandler+0x3fc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a29      	ldr	r2, [pc, #164]	; (8004124 <HAL_DMA_IRQHandler+0x400>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_DMA_IRQHandler+0x404>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_DMA_IRQHandler+0x408>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a24      	ldr	r2, [pc, #144]	; (8004130 <HAL_DMA_IRQHandler+0x40c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a23      	ldr	r2, [pc, #140]	; (8004134 <HAL_DMA_IRQHandler+0x410>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <HAL_DMA_IRQHandler+0x414>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_DMA_IRQHandler+0x418>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_DMA_IRQHandler+0x41c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_DMA_IRQHandler+0x420>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_DMA_IRQHandler+0x424>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_DMA_IRQHandler+0x428>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_DMA_IRQHandler+0x42c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_DMA_IRQHandler+0x430>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_IRQHandler+0x3e2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <HAL_DMA_IRQHandler+0x434>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d12a      	bne.n	800415c <HAL_DMA_IRQHandler+0x438>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e023      	b.n	8004164 <HAL_DMA_IRQHandler+0x440>
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2204      	movs	r2, #4
 8004172:	409a      	lsls	r2, r3
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2210      	movs	r2, #16
 800418e:	409a      	lsls	r2, r3
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a6 	beq.w	80042e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a85      	ldr	r2, [pc, #532]	; (80043b4 <HAL_DMA_IRQHandler+0x690>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a83      	ldr	r2, [pc, #524]	; (80043b8 <HAL_DMA_IRQHandler+0x694>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a82      	ldr	r2, [pc, #520]	; (80043bc <HAL_DMA_IRQHandler+0x698>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_DMA_IRQHandler+0x69c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7f      	ldr	r2, [pc, #508]	; (80043c4 <HAL_DMA_IRQHandler+0x6a0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7d      	ldr	r2, [pc, #500]	; (80043c8 <HAL_DMA_IRQHandler+0x6a4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7c      	ldr	r2, [pc, #496]	; (80043cc <HAL_DMA_IRQHandler+0x6a8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7a      	ldr	r2, [pc, #488]	; (80043d0 <HAL_DMA_IRQHandler+0x6ac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a79      	ldr	r2, [pc, #484]	; (80043d4 <HAL_DMA_IRQHandler+0x6b0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a77      	ldr	r2, [pc, #476]	; (80043d8 <HAL_DMA_IRQHandler+0x6b4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a76      	ldr	r2, [pc, #472]	; (80043dc <HAL_DMA_IRQHandler+0x6b8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a74      	ldr	r2, [pc, #464]	; (80043e0 <HAL_DMA_IRQHandler+0x6bc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a73      	ldr	r2, [pc, #460]	; (80043e4 <HAL_DMA_IRQHandler+0x6c0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a71      	ldr	r2, [pc, #452]	; (80043e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a70      	ldr	r2, [pc, #448]	; (80043ec <HAL_DMA_IRQHandler+0x6c8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_DMA_IRQHandler+0x516>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10a      	bne.n	8004250 <HAL_DMA_IRQHandler+0x52c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e009      	b.n	8004264 <HAL_DMA_IRQHandler+0x540>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03e      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2210      	movs	r2, #16
 8004272:	409a      	lsls	r2, r3
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d024      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
 80042a4:	e01f      	b.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01b      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
 80042b6:	e016      	b.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0208 	bic.w	r2, r2, #8
 80042d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2220      	movs	r2, #32
 80042f0:	409a      	lsls	r2, r3
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8110 	beq.w	800451c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <HAL_DMA_IRQHandler+0x690>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_DMA_IRQHandler+0x694>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <HAL_DMA_IRQHandler+0x698>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_DMA_IRQHandler+0x69c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_DMA_IRQHandler+0x6a0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_DMA_IRQHandler+0x6a4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a23      	ldr	r2, [pc, #140]	; (80043cc <HAL_DMA_IRQHandler+0x6a8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_DMA_IRQHandler+0x6ac>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_DMA_IRQHandler+0x6b0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_DMA_IRQHandler+0x6b4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_DMA_IRQHandler+0x6b8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_DMA_IRQHandler+0x6bc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_DMA_IRQHandler+0x6c0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_DMA_IRQHandler+0x6c8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x678>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d12b      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x6d0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e02a      	b.n	8004408 <HAL_DMA_IRQHandler+0x6e4>
 80043b2:	bf00      	nop
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8087 	beq.w	800451c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2220      	movs	r2, #32
 8004418:	409a      	lsls	r2, r3
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b04      	cmp	r3, #4
 8004428:	d139      	bne.n	800449e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0216 	bic.w	r2, r2, #22
 8004438:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004448:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <HAL_DMA_IRQHandler+0x736>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0208 	bic.w	r2, r2, #8
 8004468:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	223f      	movs	r2, #63	; 0x3f
 8004474:	409a      	lsls	r2, r3
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 834a 	beq.w	8004b28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
          }
          return;
 800449c:	e344      	b.n	8004b28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
 80044ca:	e027      	b.n	800451c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
 80044dc:	e01e      	b.n	800451c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10f      	bne.n	800450c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0210 	bic.w	r2, r2, #16
 80044fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8306 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8088 	beq.w	8004644 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2204      	movs	r2, #4
 8004538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a7a      	ldr	r2, [pc, #488]	; (800472c <HAL_DMA_IRQHandler+0xa08>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d04a      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a79      	ldr	r2, [pc, #484]	; (8004730 <HAL_DMA_IRQHandler+0xa0c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d045      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a77      	ldr	r2, [pc, #476]	; (8004734 <HAL_DMA_IRQHandler+0xa10>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d040      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a76      	ldr	r2, [pc, #472]	; (8004738 <HAL_DMA_IRQHandler+0xa14>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d03b      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a74      	ldr	r2, [pc, #464]	; (800473c <HAL_DMA_IRQHandler+0xa18>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d036      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a73      	ldr	r2, [pc, #460]	; (8004740 <HAL_DMA_IRQHandler+0xa1c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d031      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a71      	ldr	r2, [pc, #452]	; (8004744 <HAL_DMA_IRQHandler+0xa20>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02c      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a70      	ldr	r2, [pc, #448]	; (8004748 <HAL_DMA_IRQHandler+0xa24>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d027      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6e      	ldr	r2, [pc, #440]	; (800474c <HAL_DMA_IRQHandler+0xa28>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d022      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6d      	ldr	r2, [pc, #436]	; (8004750 <HAL_DMA_IRQHandler+0xa2c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d01d      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6b      	ldr	r2, [pc, #428]	; (8004754 <HAL_DMA_IRQHandler+0xa30>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6a      	ldr	r2, [pc, #424]	; (8004758 <HAL_DMA_IRQHandler+0xa34>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a68      	ldr	r2, [pc, #416]	; (800475c <HAL_DMA_IRQHandler+0xa38>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a67      	ldr	r2, [pc, #412]	; (8004760 <HAL_DMA_IRQHandler+0xa3c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a65      	ldr	r2, [pc, #404]	; (8004764 <HAL_DMA_IRQHandler+0xa40>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_DMA_IRQHandler+0x8b8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a64      	ldr	r2, [pc, #400]	; (8004768 <HAL_DMA_IRQHandler+0xa44>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_DMA_IRQHandler+0x8ca>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e007      	b.n	80045fe <HAL_DMA_IRQHandler+0x8da>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004606:	429a      	cmp	r2, r3
 8004608:	d307      	bcc.n	800461a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f2      	bne.n	80045fe <HAL_DMA_IRQHandler+0x8da>
 8004618:	e000      	b.n	800461c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800461a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2203      	movs	r2, #3
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004632:	e003      	b.n	800463c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8272 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
 8004656:	e26c      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a43      	ldr	r2, [pc, #268]	; (800476c <HAL_DMA_IRQHandler+0xa48>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a42      	ldr	r2, [pc, #264]	; (8004770 <HAL_DMA_IRQHandler+0xa4c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a40      	ldr	r2, [pc, #256]	; (8004774 <HAL_DMA_IRQHandler+0xa50>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_DMA_IRQHandler+0xa54>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3d      	ldr	r2, [pc, #244]	; (800477c <HAL_DMA_IRQHandler+0xa58>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <HAL_DMA_IRQHandler+0xa5c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3a      	ldr	r2, [pc, #232]	; (8004784 <HAL_DMA_IRQHandler+0xa60>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x984>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a39      	ldr	r2, [pc, #228]	; (8004788 <HAL_DMA_IRQHandler+0xa64>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_IRQHandler+0x988>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_DMA_IRQHandler+0x98a>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 823f 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2204      	movs	r2, #4
 80046c6:	409a      	lsls	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80cd 	beq.w	800486c <HAL_DMA_IRQHandler+0xb48>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80c7 	beq.w	800486c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2204      	movs	r2, #4
 80046e8:	409a      	lsls	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d049      	beq.n	800478c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8210 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004714:	e20a      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8206 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004728:	e200      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe08>
 800472a:	bf00      	nop
 800472c:	40020010 	.word	0x40020010
 8004730:	40020028 	.word	0x40020028
 8004734:	40020040 	.word	0x40020040
 8004738:	40020058 	.word	0x40020058
 800473c:	40020070 	.word	0x40020070
 8004740:	40020088 	.word	0x40020088
 8004744:	400200a0 	.word	0x400200a0
 8004748:	400200b8 	.word	0x400200b8
 800474c:	40020410 	.word	0x40020410
 8004750:	40020428 	.word	0x40020428
 8004754:	40020440 	.word	0x40020440
 8004758:	40020458 	.word	0x40020458
 800475c:	40020470 	.word	0x40020470
 8004760:	40020488 	.word	0x40020488
 8004764:	400204a0 	.word	0x400204a0
 8004768:	400204b8 	.word	0x400204b8
 800476c:	58025408 	.word	0x58025408
 8004770:	5802541c 	.word	0x5802541c
 8004774:	58025430 	.word	0x58025430
 8004778:	58025444 	.word	0x58025444
 800477c:	58025458 	.word	0x58025458
 8004780:	5802546c 	.word	0x5802546c
 8004784:	58025480 	.word	0x58025480
 8004788:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d160      	bne.n	8004858 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a8c      	ldr	r2, [pc, #560]	; (80049cc <HAL_DMA_IRQHandler+0xca8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a8a      	ldr	r2, [pc, #552]	; (80049d0 <HAL_DMA_IRQHandler+0xcac>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a89      	ldr	r2, [pc, #548]	; (80049d4 <HAL_DMA_IRQHandler+0xcb0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a87      	ldr	r2, [pc, #540]	; (80049d8 <HAL_DMA_IRQHandler+0xcb4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a86      	ldr	r2, [pc, #536]	; (80049dc <HAL_DMA_IRQHandler+0xcb8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a84      	ldr	r2, [pc, #528]	; (80049e0 <HAL_DMA_IRQHandler+0xcbc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a83      	ldr	r2, [pc, #524]	; (80049e4 <HAL_DMA_IRQHandler+0xcc0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a81      	ldr	r2, [pc, #516]	; (80049e8 <HAL_DMA_IRQHandler+0xcc4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a80      	ldr	r2, [pc, #512]	; (80049ec <HAL_DMA_IRQHandler+0xcc8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7e      	ldr	r2, [pc, #504]	; (80049f0 <HAL_DMA_IRQHandler+0xccc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7d      	ldr	r2, [pc, #500]	; (80049f4 <HAL_DMA_IRQHandler+0xcd0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7b      	ldr	r2, [pc, #492]	; (80049f8 <HAL_DMA_IRQHandler+0xcd4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7a      	ldr	r2, [pc, #488]	; (80049fc <HAL_DMA_IRQHandler+0xcd8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a78      	ldr	r2, [pc, #480]	; (8004a00 <HAL_DMA_IRQHandler+0xcdc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a77      	ldr	r2, [pc, #476]	; (8004a04 <HAL_DMA_IRQHandler+0xce0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0xb12>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a75      	ldr	r2, [pc, #468]	; (8004a08 <HAL_DMA_IRQHandler+0xce4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <HAL_DMA_IRQHandler+0xb24>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0208 	bic.w	r2, r2, #8
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e007      	b.n	8004858 <HAL_DMA_IRQHandler+0xb34>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8165 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486a:	e15f      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2202      	movs	r2, #2
 8004876:	409a      	lsls	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80c5 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xce8>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80bf 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2202      	movs	r2, #2
 8004898:	409a      	lsls	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 813a 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c4:	e134      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8130 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	e12a      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d168      	bne.n	80049b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a38      	ldr	r2, [pc, #224]	; (80049cc <HAL_DMA_IRQHandler+0xca8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d04a      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_DMA_IRQHandler+0xcac>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d045      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_DMA_IRQHandler+0xcb0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d040      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a34      	ldr	r2, [pc, #208]	; (80049d8 <HAL_DMA_IRQHandler+0xcb4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d03b      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_DMA_IRQHandler+0xcb8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d036      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_DMA_IRQHandler+0xcbc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d031      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <HAL_DMA_IRQHandler+0xcc0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02c      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_DMA_IRQHandler+0xcc4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d027      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <HAL_DMA_IRQHandler+0xcc8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d022      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_DMA_IRQHandler+0xccc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01d      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_DMA_IRQHandler+0xcd0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_DMA_IRQHandler+0xcd4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_DMA_IRQHandler+0xcd8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <HAL_DMA_IRQHandler+0xcdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <HAL_DMA_IRQHandler+0xce0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_DMA_IRQHandler+0xc60>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <HAL_DMA_IRQHandler+0xce4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <HAL_DMA_IRQHandler+0xc72>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0214 	bic.w	r2, r2, #20
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e007      	b.n	80049a6 <HAL_DMA_IRQHandler+0xc82>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 020a 	bic.w	r2, r2, #10
 80049a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80b8 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c8:	e0b2      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe0c>
 80049ca:	bf00      	nop
 80049cc:	40020010 	.word	0x40020010
 80049d0:	40020028 	.word	0x40020028
 80049d4:	40020040 	.word	0x40020040
 80049d8:	40020058 	.word	0x40020058
 80049dc:	40020070 	.word	0x40020070
 80049e0:	40020088 	.word	0x40020088
 80049e4:	400200a0 	.word	0x400200a0
 80049e8:	400200b8 	.word	0x400200b8
 80049ec:	40020410 	.word	0x40020410
 80049f0:	40020428 	.word	0x40020428
 80049f4:	40020440 	.word	0x40020440
 80049f8:	40020458 	.word	0x40020458
 80049fc:	40020470 	.word	0x40020470
 8004a00:	40020488 	.word	0x40020488
 8004a04:	400204a0 	.word	0x400204a0
 8004a08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2208      	movs	r2, #8
 8004a16:	409a      	lsls	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8088 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe0e>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8082 	beq.w	8004b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <HAL_DMA_IRQHandler+0xe14>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <HAL_DMA_IRQHandler+0xe18>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3e      	ldr	r2, [pc, #248]	; (8004b40 <HAL_DMA_IRQHandler+0xe1c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <HAL_DMA_IRQHandler+0xe20>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	; (8004b48 <HAL_DMA_IRQHandler+0xe24>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a39      	ldr	r2, [pc, #228]	; (8004b4c <HAL_DMA_IRQHandler+0xe28>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <HAL_DMA_IRQHandler+0xe2c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <HAL_DMA_IRQHandler+0xe30>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <HAL_DMA_IRQHandler+0xe34>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <HAL_DMA_IRQHandler+0xe38>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <HAL_DMA_IRQHandler+0xe3c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	; (8004b64 <HAL_DMA_IRQHandler+0xe40>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <HAL_DMA_IRQHandler+0xe44>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <HAL_DMA_IRQHandler+0xe48>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <HAL_DMA_IRQHandler+0xe4c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_IRQHandler+0xdaa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <HAL_DMA_IRQHandler+0xe50>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0xdbc>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 021c 	bic.w	r2, r2, #28
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e007      	b.n	8004af0 <HAL_DMA_IRQHandler+0xdcc>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 020e 	bic.w	r2, r2, #14
 8004aee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2201      	movs	r2, #1
 8004afa:	409a      	lsls	r2, r3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	e004      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b28:	bf00      	nop
 8004b2a:	e002      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8

08004b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a84      	ldr	r2, [pc, #528]	; (8004da8 <DMA_SetConfig+0x230>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d072      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a82      	ldr	r2, [pc, #520]	; (8004dac <DMA_SetConfig+0x234>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d06d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a81      	ldr	r2, [pc, #516]	; (8004db0 <DMA_SetConfig+0x238>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d068      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7f      	ldr	r2, [pc, #508]	; (8004db4 <DMA_SetConfig+0x23c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d063      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7e      	ldr	r2, [pc, #504]	; (8004db8 <DMA_SetConfig+0x240>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d05e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <DMA_SetConfig+0x244>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d059      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7b      	ldr	r2, [pc, #492]	; (8004dc0 <DMA_SetConfig+0x248>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d054      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <DMA_SetConfig+0x24c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04f      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a78      	ldr	r2, [pc, #480]	; (8004dc8 <DMA_SetConfig+0x250>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04a      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a76      	ldr	r2, [pc, #472]	; (8004dcc <DMA_SetConfig+0x254>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d045      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a75      	ldr	r2, [pc, #468]	; (8004dd0 <DMA_SetConfig+0x258>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a73      	ldr	r2, [pc, #460]	; (8004dd4 <DMA_SetConfig+0x25c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d03b      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a72      	ldr	r2, [pc, #456]	; (8004dd8 <DMA_SetConfig+0x260>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d036      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a70      	ldr	r2, [pc, #448]	; (8004ddc <DMA_SetConfig+0x264>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d031      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6f      	ldr	r2, [pc, #444]	; (8004de0 <DMA_SetConfig+0x268>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02c      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6d      	ldr	r2, [pc, #436]	; (8004de4 <DMA_SetConfig+0x26c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d027      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6c      	ldr	r2, [pc, #432]	; (8004de8 <DMA_SetConfig+0x270>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <DMA_SetConfig+0x274>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <DMA_SetConfig+0x278>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a67      	ldr	r2, [pc, #412]	; (8004df4 <DMA_SetConfig+0x27c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a66      	ldr	r2, [pc, #408]	; (8004df8 <DMA_SetConfig+0x280>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a64      	ldr	r2, [pc, #400]	; (8004dfc <DMA_SetConfig+0x284>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a63      	ldr	r2, [pc, #396]	; (8004e00 <DMA_SetConfig+0x288>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a61      	ldr	r2, [pc, #388]	; (8004e04 <DMA_SetConfig+0x28c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <DMA_SetConfig+0x10e>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <DMA_SetConfig+0x110>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3e      	ldr	r2, [pc, #248]	; (8004da8 <DMA_SetConfig+0x230>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <DMA_SetConfig+0x234>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <DMA_SetConfig+0x238>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3a      	ldr	r2, [pc, #232]	; (8004db4 <DMA_SetConfig+0x23c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a38      	ldr	r2, [pc, #224]	; (8004db8 <DMA_SetConfig+0x240>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a37      	ldr	r2, [pc, #220]	; (8004dbc <DMA_SetConfig+0x244>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a35      	ldr	r2, [pc, #212]	; (8004dc0 <DMA_SetConfig+0x248>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <DMA_SetConfig+0x24c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <DMA_SetConfig+0x250>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a31      	ldr	r2, [pc, #196]	; (8004dcc <DMA_SetConfig+0x254>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <DMA_SetConfig+0x258>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <DMA_SetConfig+0x25c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2c      	ldr	r2, [pc, #176]	; (8004dd8 <DMA_SetConfig+0x260>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2b      	ldr	r2, [pc, #172]	; (8004ddc <DMA_SetConfig+0x264>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <DMA_SetConfig+0x268>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <DMA_SetConfig+0x26c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <DMA_SetConfig+0x1d4>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <DMA_SetConfig+0x1d6>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d05a      	beq.n	8004e08 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	223f      	movs	r2, #63	; 0x3f
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d108      	bne.n	8004d94 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d92:	e087      	b.n	8004ea4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
}
 8004da4:	e07e      	b.n	8004ea4 <DMA_SetConfig+0x32c>
 8004da6:	bf00      	nop
 8004da8:	40020010 	.word	0x40020010
 8004dac:	40020028 	.word	0x40020028
 8004db0:	40020040 	.word	0x40020040
 8004db4:	40020058 	.word	0x40020058
 8004db8:	40020070 	.word	0x40020070
 8004dbc:	40020088 	.word	0x40020088
 8004dc0:	400200a0 	.word	0x400200a0
 8004dc4:	400200b8 	.word	0x400200b8
 8004dc8:	40020410 	.word	0x40020410
 8004dcc:	40020428 	.word	0x40020428
 8004dd0:	40020440 	.word	0x40020440
 8004dd4:	40020458 	.word	0x40020458
 8004dd8:	40020470 	.word	0x40020470
 8004ddc:	40020488 	.word	0x40020488
 8004de0:	400204a0 	.word	0x400204a0
 8004de4:	400204b8 	.word	0x400204b8
 8004de8:	58025408 	.word	0x58025408
 8004dec:	5802541c 	.word	0x5802541c
 8004df0:	58025430 	.word	0x58025430
 8004df4:	58025444 	.word	0x58025444
 8004df8:	58025458 	.word	0x58025458
 8004dfc:	5802546c 	.word	0x5802546c
 8004e00:	58025480 	.word	0x58025480
 8004e04:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <DMA_SetConfig+0x338>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <DMA_SetConfig+0x33c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <DMA_SetConfig+0x340>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <DMA_SetConfig+0x344>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <DMA_SetConfig+0x348>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <DMA_SetConfig+0x34c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <DMA_SetConfig+0x350>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <DMA_SetConfig+0x2e0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <DMA_SetConfig+0x354>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <DMA_SetConfig+0x2e4>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <DMA_SetConfig+0x2e6>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d108      	bne.n	8004e94 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	60da      	str	r2, [r3, #12]
}
 8004e92:	e007      	b.n	8004ea4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	58025408 	.word	0x58025408
 8004eb4:	5802541c 	.word	0x5802541c
 8004eb8:	58025430 	.word	0x58025430
 8004ebc:	58025444 	.word	0x58025444
 8004ec0:	58025458 	.word	0x58025458
 8004ec4:	5802546c 	.word	0x5802546c
 8004ec8:	58025480 	.word	0x58025480
 8004ecc:	58025494 	.word	0x58025494

08004ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a42      	ldr	r2, [pc, #264]	; (8004fe8 <DMA_CalcBaseAndBitshift+0x118>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a41      	ldr	r2, [pc, #260]	; (8004fec <DMA_CalcBaseAndBitshift+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3f      	ldr	r2, [pc, #252]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3e      	ldr	r2, [pc, #248]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3c      	ldr	r2, [pc, #240]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x128>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <DMA_CalcBaseAndBitshift+0x12c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a39      	ldr	r2, [pc, #228]	; (8005000 <DMA_CalcBaseAndBitshift+0x130>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a38      	ldr	r2, [pc, #224]	; (8005004 <DMA_CalcBaseAndBitshift+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a36      	ldr	r2, [pc, #216]	; (8005008 <DMA_CalcBaseAndBitshift+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a35      	ldr	r2, [pc, #212]	; (800500c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a33      	ldr	r2, [pc, #204]	; (8005010 <DMA_CalcBaseAndBitshift+0x140>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a32      	ldr	r2, [pc, #200]	; (8005014 <DMA_CalcBaseAndBitshift+0x144>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a30      	ldr	r2, [pc, #192]	; (8005018 <DMA_CalcBaseAndBitshift+0x148>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2f      	ldr	r2, [pc, #188]	; (800501c <DMA_CalcBaseAndBitshift+0x14c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	; (8005020 <DMA_CalcBaseAndBitshift+0x150>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <DMA_CalcBaseAndBitshift+0x154>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <DMA_CalcBaseAndBitshift+0xac>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <DMA_CalcBaseAndBitshift+0xae>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d024      	beq.n	8004fcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	3b10      	subs	r3, #16
 8004f8a:	4a27      	ldr	r2, [pc, #156]	; (8005028 <DMA_CalcBaseAndBitshift+0x158>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	4a24      	ldr	r2, [pc, #144]	; (800502c <DMA_CalcBaseAndBitshift+0x15c>)
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d908      	bls.n	8004fbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <DMA_CalcBaseAndBitshift+0x160>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8004fba:	e00d      	b.n	8004fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	e005      	b.n	8004fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40020010 	.word	0x40020010
 8004fec:	40020028 	.word	0x40020028
 8004ff0:	40020040 	.word	0x40020040
 8004ff4:	40020058 	.word	0x40020058
 8004ff8:	40020070 	.word	0x40020070
 8004ffc:	40020088 	.word	0x40020088
 8005000:	400200a0 	.word	0x400200a0
 8005004:	400200b8 	.word	0x400200b8
 8005008:	40020410 	.word	0x40020410
 800500c:	40020428 	.word	0x40020428
 8005010:	40020440 	.word	0x40020440
 8005014:	40020458 	.word	0x40020458
 8005018:	40020470 	.word	0x40020470
 800501c:	40020488 	.word	0x40020488
 8005020:	400204a0 	.word	0x400204a0
 8005024:	400204b8 	.word	0x400204b8
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	08009424 	.word	0x08009424
 8005030:	fffffc00 	.word	0xfffffc00

08005034 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d120      	bne.n	800508a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	2b03      	cmp	r3, #3
 800504e:	d858      	bhi.n	8005102 <DMA_CheckFifoParam+0xce>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <DMA_CheckFifoParam+0x24>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	0800507b 	.word	0x0800507b
 8005060:	08005069 	.word	0x08005069
 8005064:	08005103 	.word	0x08005103
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d048      	beq.n	8005106 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005078:	e045      	b.n	8005106 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005082:	d142      	bne.n	800510a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005088:	e03f      	b.n	800510a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	d123      	bne.n	80050dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	2b03      	cmp	r3, #3
 800509a:	d838      	bhi.n	800510e <DMA_CheckFifoParam+0xda>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <DMA_CheckFifoParam+0x70>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050bb 	.word	0x080050bb
 80050ac:	080050b5 	.word	0x080050b5
 80050b0:	080050cd 	.word	0x080050cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
        break;
 80050b8:	e030      	b.n	800511c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d025      	beq.n	8005112 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ca:	e022      	b.n	8005112 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050d4:	d11f      	bne.n	8005116 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050da:	e01c      	b.n	8005116 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d902      	bls.n	80050ea <DMA_CheckFifoParam+0xb6>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d003      	beq.n	80050f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050e8:	e018      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
        break;
 80050ee:	e015      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00e      	beq.n	800511a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005100:	e00b      	b.n	800511a <DMA_CheckFifoParam+0xe6>
        break;
 8005102:	bf00      	nop
 8005104:	e00a      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005106:	bf00      	nop
 8005108:	e008      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 800510a:	bf00      	nop
 800510c:	e006      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 800510e:	bf00      	nop
 8005110:	e004      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <DMA_CheckFifoParam+0xe8>
        break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <DMA_CheckFifoParam+0xe8>
    break;
 800511a:	bf00      	nop
    }
  }

  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a36      	ldr	r2, [pc, #216]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a35      	ldr	r2, [pc, #212]	; (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a33      	ldr	r2, [pc, #204]	; (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a32      	ldr	r2, [pc, #200]	; (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a30      	ldr	r2, [pc, #192]	; (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2f      	ldr	r2, [pc, #188]	; (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2d      	ldr	r2, [pc, #180]	; (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	3b08      	subs	r3, #8
 800519c:	4a28      	ldr	r2, [pc, #160]	; (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	2201      	movs	r2, #1
 80051c2:	409a      	lsls	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051c8:	e024      	b.n	8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	3b10      	subs	r3, #16
 80051d2:	4a1e      	ldr	r2, [pc, #120]	; (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d806      	bhi.n	80051f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d902      	bls.n	80051f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3308      	adds	r3, #8
 80051f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a16      	ldr	r2, [pc, #88]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005204:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	58025408 	.word	0x58025408
 8005224:	5802541c 	.word	0x5802541c
 8005228:	58025430 	.word	0x58025430
 800522c:	58025444 	.word	0x58025444
 8005230:	58025458 	.word	0x58025458
 8005234:	5802546c 	.word	0x5802546c
 8005238:	58025480 	.word	0x58025480
 800523c:	58025494 	.word	0x58025494
 8005240:	cccccccd 	.word	0xcccccccd
 8005244:	16009600 	.word	0x16009600
 8005248:	58025880 	.word	0x58025880
 800524c:	aaaaaaab 	.word	0xaaaaaaab
 8005250:	400204b8 	.word	0x400204b8
 8005254:	4002040f 	.word	0x4002040f
 8005258:	10008200 	.word	0x10008200
 800525c:	40020880 	.word	0x40020880

08005260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04a      	beq.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d847      	bhi.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a24      	ldr	r2, [pc, #144]	; (800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01d      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	; (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4b17      	ldr	r3, [pc, #92]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052e8:	671a      	str	r2, [r3, #112]	; 0x70
 80052ea:	e009      	b.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a11      	ldr	r2, [pc, #68]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b01      	subs	r3, #1
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	58025408 	.word	0x58025408
 800531c:	5802541c 	.word	0x5802541c
 8005320:	58025430 	.word	0x58025430
 8005324:	58025444 	.word	0x58025444
 8005328:	58025458 	.word	0x58025458
 800532c:	5802546c 	.word	0x5802546c
 8005330:	58025480 	.word	0x58025480
 8005334:	58025494 	.word	0x58025494
 8005338:	1600963f 	.word	0x1600963f
 800533c:	58025940 	.word	0x58025940
 8005340:	1000823f 	.word	0x1000823f
 8005344:	40020940 	.word	0x40020940

08005348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	; 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005356:	4b89      	ldr	r3, [pc, #548]	; (800557c <HAL_GPIO_Init+0x234>)
 8005358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800535a:	e194      	b.n	8005686 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	4013      	ands	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8186 	beq.w	8005680 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d005      	beq.n	800538c <HAL_GPIO_Init+0x44>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d130      	bne.n	80053ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	2203      	movs	r2, #3
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053c2:	2201      	movs	r2, #1
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 0201 	and.w	r2, r3, #1
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d017      	beq.n	800542a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	2203      	movs	r2, #3
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d123      	bne.n	800547e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	08da      	lsrs	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3208      	adds	r2, #8
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	220f      	movs	r2, #15
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	08da      	lsrs	r2, r3, #3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3208      	adds	r2, #8
 8005478:	69b9      	ldr	r1, [r7, #24]
 800547a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2203      	movs	r2, #3
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0203 	and.w	r2, r3, #3
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80e0 	beq.w	8005680 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c0:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <HAL_GPIO_Init+0x238>)
 80054c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c6:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <HAL_GPIO_Init+0x238>)
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_GPIO_Init+0x238>)
 80054d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054de:	4a29      	ldr	r2, [pc, #164]	; (8005584 <HAL_GPIO_Init+0x23c>)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	3302      	adds	r3, #2
 80054e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	220f      	movs	r2, #15
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a20      	ldr	r2, [pc, #128]	; (8005588 <HAL_GPIO_Init+0x240>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d052      	beq.n	80055b0 <HAL_GPIO_Init+0x268>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <HAL_GPIO_Init+0x244>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_GPIO_Init+0x22e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1e      	ldr	r2, [pc, #120]	; (8005590 <HAL_GPIO_Init+0x248>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02b      	beq.n	8005572 <HAL_GPIO_Init+0x22a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_GPIO_Init+0x24c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d025      	beq.n	800556e <HAL_GPIO_Init+0x226>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <HAL_GPIO_Init+0x250>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <HAL_GPIO_Init+0x222>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <HAL_GPIO_Init+0x254>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d019      	beq.n	8005566 <HAL_GPIO_Init+0x21e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <HAL_GPIO_Init+0x258>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_GPIO_Init+0x21a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_GPIO_Init+0x25c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00d      	beq.n	800555e <HAL_GPIO_Init+0x216>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_GPIO_Init+0x260>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <HAL_GPIO_Init+0x212>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_GPIO_Init+0x264>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_GPIO_Init+0x20e>
 8005552:	2309      	movs	r3, #9
 8005554:	e02d      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 8005556:	230a      	movs	r3, #10
 8005558:	e02b      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 800555a:	2308      	movs	r3, #8
 800555c:	e029      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 800555e:	2307      	movs	r3, #7
 8005560:	e027      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 8005562:	2306      	movs	r3, #6
 8005564:	e025      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 8005566:	2305      	movs	r3, #5
 8005568:	e023      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 800556a:	2304      	movs	r3, #4
 800556c:	e021      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 800556e:	2303      	movs	r3, #3
 8005570:	e01f      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 8005572:	2302      	movs	r3, #2
 8005574:	e01d      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 8005576:	2301      	movs	r3, #1
 8005578:	e01b      	b.n	80055b2 <HAL_GPIO_Init+0x26a>
 800557a:	bf00      	nop
 800557c:	58000080 	.word	0x58000080
 8005580:	58024400 	.word	0x58024400
 8005584:	58000400 	.word	0x58000400
 8005588:	58020000 	.word	0x58020000
 800558c:	58020400 	.word	0x58020400
 8005590:	58020800 	.word	0x58020800
 8005594:	58020c00 	.word	0x58020c00
 8005598:	58021000 	.word	0x58021000
 800559c:	58021400 	.word	0x58021400
 80055a0:	58021800 	.word	0x58021800
 80055a4:	58021c00 	.word	0x58021c00
 80055a8:	58022000 	.word	0x58022000
 80055ac:	58022400 	.word	0x58022400
 80055b0:	2300      	movs	r3, #0
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f002 0203 	and.w	r2, r2, #3
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	4093      	lsls	r3, r2
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c2:	4938      	ldr	r1, [pc, #224]	; (80056a4 <HAL_GPIO_Init+0x35c>)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	3302      	adds	r3, #2
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f ae63 	bne.w	800535c <HAL_GPIO_Init+0x14>
  }
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	3724      	adds	r7, #36	; 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	58000400 	.word	0x58000400

080056a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
 80056b4:	4613      	mov	r3, r2
 80056b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056b8:	787b      	ldrb	r3, [r7, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80056c4:	e003      	b.n	80056ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	041a      	lsls	r2, r3, #16
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	619a      	str	r2, [r3, #24]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056ec:	887a      	ldrh	r2, [r7, #2]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4013      	ands	r3, r2
 80056f2:	041a      	lsls	r2, r3, #16
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	43d9      	mvns	r1, r3
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	400b      	ands	r3, r1
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	619a      	str	r2, [r3, #24]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005718:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_PWREx_ConfigSupply+0x70>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b04      	cmp	r3, #4
 8005722:	d00a      	beq.n	800573a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_PWREx_ConfigSupply+0x70>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e01f      	b.n	8005776 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	e01d      	b.n	8005776 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_PWREx_ConfigSupply+0x70>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f023 0207 	bic.w	r2, r3, #7
 8005742:	490f      	ldr	r1, [pc, #60]	; (8005780 <HAL_PWREx_ConfigSupply+0x70>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800574a:	f7fb fe53 	bl	80013f4 <HAL_GetTick>
 800574e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005750:	e009      	b.n	8005766 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005752:	f7fb fe4f 	bl	80013f4 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005760:	d901      	bls.n	8005766 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e007      	b.n	8005776 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_PWREx_ConfigSupply+0x70>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d1ee      	bne.n	8005752 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	58024800 	.word	0x58024800

08005784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	; 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f000 bc1c 	b.w	8005fd0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8087 	beq.w	80058b4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a6:	4b9e      	ldr	r3, [pc, #632]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057b0:	4b9b      	ldr	r3, [pc, #620]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d007      	beq.n	80057cc <HAL_RCC_OscConfig+0x48>
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	2b18      	cmp	r3, #24
 80057c0:	d110      	bne.n	80057e4 <HAL_RCC_OscConfig+0x60>
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	4b94      	ldr	r3, [pc, #592]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d06c      	beq.n	80058b2 <HAL_RCC_OscConfig+0x12e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d168      	bne.n	80058b2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e3f5      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d106      	bne.n	80057fc <HAL_RCC_OscConfig+0x78>
 80057ee:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a8b      	ldr	r2, [pc, #556]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e02e      	b.n	800585a <HAL_RCC_OscConfig+0xd6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10c      	bne.n	800581e <HAL_RCC_OscConfig+0x9a>
 8005804:	4b86      	ldr	r3, [pc, #536]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a85      	ldr	r2, [pc, #532]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a82      	ldr	r2, [pc, #520]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e01d      	b.n	800585a <HAL_RCC_OscConfig+0xd6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_OscConfig+0xbe>
 8005828:	4b7d      	ldr	r3, [pc, #500]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7c      	ldr	r2, [pc, #496]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800582e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b7a      	ldr	r3, [pc, #488]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a79      	ldr	r2, [pc, #484]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800583a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	e00b      	b.n	800585a <HAL_RCC_OscConfig+0xd6>
 8005842:	4b77      	ldr	r3, [pc, #476]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a76      	ldr	r2, [pc, #472]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a73      	ldr	r2, [pc, #460]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005858:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d013      	beq.n	800588a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fb fdc7 	bl	80013f4 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586a:	f7fb fdc3 	bl	80013f4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b64      	cmp	r3, #100	; 0x64
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e3a9      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800587c:	4b68      	ldr	r3, [pc, #416]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0xe6>
 8005888:	e014      	b.n	80058b4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fb fdb3 	bl	80013f4 <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005892:	f7fb fdaf 	bl	80013f4 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b64      	cmp	r3, #100	; 0x64
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e395      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x10e>
 80058b0:	e000      	b.n	80058b4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80ca 	beq.w	8005a56 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c2:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058cc:	4b54      	ldr	r3, [pc, #336]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_RCC_OscConfig+0x164>
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b18      	cmp	r3, #24
 80058dc:	d156      	bne.n	800598c <HAL_RCC_OscConfig+0x208>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d151      	bne.n	800598c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_OscConfig+0x17c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e367      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005900:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 0219 	bic.w	r2, r3, #25
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4944      	ldr	r1, [pc, #272]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005912:	f7fb fd6f 	bl	80013f4 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800591a:	f7fb fd6b 	bl	80013f4 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e351      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800592c:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005938:	f7fb fd68 	bl	800140c <HAL_GetREVID>
 800593c:	4603      	mov	r3, r0
 800593e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005942:	4293      	cmp	r3, r2
 8005944:	d817      	bhi.n	8005976 <HAL_RCC_OscConfig+0x1f2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d108      	bne.n	8005960 <HAL_RCC_OscConfig+0x1dc>
 800594e:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005956:	4a32      	ldr	r2, [pc, #200]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800595e:	e07a      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	492c      	ldr	r1, [pc, #176]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	e06f      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	061b      	lsls	r3, r3, #24
 8005984:	4926      	ldr	r1, [pc, #152]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005986:	4313      	orrs	r3, r2
 8005988:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800598a:	e064      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d047      	beq.n	8005a24 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f023 0219 	bic.w	r2, r3, #25
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	491f      	ldr	r1, [pc, #124]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fb fd25 	bl	80013f4 <HAL_GetTick>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ae:	f7fb fd21 	bl	80013f4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e307      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	f7fb fd1e 	bl	800140c <HAL_GetREVID>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d817      	bhi.n	8005a0a <HAL_RCC_OscConfig+0x286>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d108      	bne.n	80059f4 <HAL_RCC_OscConfig+0x270>
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80059ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	e030      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	4907      	ldr	r1, [pc, #28]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	e025      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	4901      	ldr	r1, [pc, #4]	; (8005a20 <HAL_RCC_OscConfig+0x29c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
 8005a1e:	e01a      	b.n	8005a56 <HAL_RCC_OscConfig+0x2d2>
 8005a20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a24:	4b9e      	ldr	r3, [pc, #632]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a9d      	ldr	r2, [pc, #628]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fb fce0 	bl	80013f4 <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a38:	f7fb fcdc 	bl	80013f4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e2c2      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a4a:	4b95      	ldr	r3, [pc, #596]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a9 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a64:	4b8e      	ldr	r3, [pc, #568]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a6e:	4b8c      	ldr	r3, [pc, #560]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d007      	beq.n	8005a8a <HAL_RCC_OscConfig+0x306>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b18      	cmp	r3, #24
 8005a7e:	d13a      	bne.n	8005af6 <HAL_RCC_OscConfig+0x372>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d135      	bne.n	8005af6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a8a:	4b85      	ldr	r3, [pc, #532]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x31e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e296      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aa2:	f7fb fcb3 	bl	800140c <HAL_GetREVID>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d817      	bhi.n	8005ae0 <HAL_RCC_OscConfig+0x35c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d108      	bne.n	8005aca <HAL_RCC_OscConfig+0x346>
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ac0:	4a77      	ldr	r2, [pc, #476]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac8:	e075      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aca:	4b75      	ldr	r3, [pc, #468]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	069b      	lsls	r3, r3, #26
 8005ad8:	4971      	ldr	r1, [pc, #452]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ade:	e06a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	496c      	ldr	r1, [pc, #432]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005af4:	e05f      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d042      	beq.n	8005b84 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005afe:	4b68      	ldr	r3, [pc, #416]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a67      	ldr	r2, [pc, #412]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fb fc73 	bl	80013f4 <HAL_GetTick>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b12:	f7fb fc6f 	bl	80013f4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e255      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b24:	4b5e      	ldr	r3, [pc, #376]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b30:	f7fb fc6c 	bl	800140c <HAL_GetREVID>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d817      	bhi.n	8005b6e <HAL_RCC_OscConfig+0x3ea>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d108      	bne.n	8005b58 <HAL_RCC_OscConfig+0x3d4>
 8005b46:	4b56      	ldr	r3, [pc, #344]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b4e:	4a54      	ldr	r2, [pc, #336]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	e02e      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
 8005b58:	4b51      	ldr	r3, [pc, #324]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	069b      	lsls	r3, r3, #26
 8005b66:	494e      	ldr	r1, [pc, #312]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	e023      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
 8005b6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	4948      	ldr	r1, [pc, #288]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60cb      	str	r3, [r1, #12]
 8005b82:	e018      	b.n	8005bb6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b84:	4b46      	ldr	r3, [pc, #280]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a45      	ldr	r2, [pc, #276]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fb fc30 	bl	80013f4 <HAL_GetTick>
 8005b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b98:	f7fb fc2c 	bl	80013f4 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e212      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005baa:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d036      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d019      	beq.n	8005bfe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bca:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bce:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd6:	f7fb fc0d 	bl	80013f4 <HAL_GetTick>
 8005bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bde:	f7fb fc09 	bl	80013f4 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e1ef      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bf0:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x45a>
 8005bfc:	e018      	b.n	8005c30 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fb fbf3 	bl	80013f4 <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c12:	f7fb fbef 	bl	80013f4 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e1d5      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c24:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d039      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d019      	beq.n	8005c78 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c50:	f7fb fbd0 	bl	80013f4 <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c58:	f7fb fbcc 	bl	80013f4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e1b2      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x4d4>
 8005c76:	e01b      	b.n	8005cb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <HAL_RCC_OscConfig+0x51c>)
 8005c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c84:	f7fb fbb6 	bl	80013f4 <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c8a:	e00b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c8c:	f7fb fbb2 	bl	80013f4 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d904      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e198      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
 8005c9e:	bf00      	nop
 8005ca0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ca4:	4ba3      	ldr	r3, [pc, #652]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ed      	bne.n	8005c8c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8081 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cbe:	4b9e      	ldr	r3, [pc, #632]	; (8005f38 <HAL_RCC_OscConfig+0x7b4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a9d      	ldr	r2, [pc, #628]	; (8005f38 <HAL_RCC_OscConfig+0x7b4>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cca:	f7fb fb93 	bl	80013f4 <HAL_GetTick>
 8005cce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cd2:	f7fb fb8f 	bl	80013f4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b64      	cmp	r3, #100	; 0x64
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e175      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ce4:	4b94      	ldr	r3, [pc, #592]	; (8005f38 <HAL_RCC_OscConfig+0x7b4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x582>
 8005cf8:	4b8e      	ldr	r3, [pc, #568]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	4a8d      	ldr	r2, [pc, #564]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	; 0x70
 8005d04:	e02d      	b.n	8005d62 <HAL_RCC_OscConfig+0x5de>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x5a4>
 8005d0e:	4b89      	ldr	r3, [pc, #548]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a88      	ldr	r2, [pc, #544]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	4b86      	ldr	r3, [pc, #536]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a85      	ldr	r2, [pc, #532]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d20:	f023 0304 	bic.w	r3, r3, #4
 8005d24:	6713      	str	r3, [r2, #112]	; 0x70
 8005d26:	e01c      	b.n	8005d62 <HAL_RCC_OscConfig+0x5de>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d10c      	bne.n	8005d4a <HAL_RCC_OscConfig+0x5c6>
 8005d30:	4b80      	ldr	r3, [pc, #512]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a7f      	ldr	r2, [pc, #508]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d36:	f043 0304 	orr.w	r3, r3, #4
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3c:	4b7d      	ldr	r3, [pc, #500]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	4a7c      	ldr	r2, [pc, #496]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	6713      	str	r3, [r2, #112]	; 0x70
 8005d48:	e00b      	b.n	8005d62 <HAL_RCC_OscConfig+0x5de>
 8005d4a:	4b7a      	ldr	r3, [pc, #488]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a79      	ldr	r2, [pc, #484]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d50:	f023 0301 	bic.w	r3, r3, #1
 8005d54:	6713      	str	r3, [r2, #112]	; 0x70
 8005d56:	4b77      	ldr	r3, [pc, #476]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	4a76      	ldr	r2, [pc, #472]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d015      	beq.n	8005d96 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6a:	f7fb fb43 	bl	80013f4 <HAL_GetTick>
 8005d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d70:	e00a      	b.n	8005d88 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d72:	f7fb fb3f 	bl	80013f4 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e123      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d88:	4b6a      	ldr	r3, [pc, #424]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0ee      	beq.n	8005d72 <HAL_RCC_OscConfig+0x5ee>
 8005d94:	e014      	b.n	8005dc0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fb fb2d 	bl	80013f4 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d9c:	e00a      	b.n	8005db4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9e:	f7fb fb29 	bl	80013f4 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e10d      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005db4:	4b5f      	ldr	r3, [pc, #380]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1ee      	bne.n	8005d9e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8102 	beq.w	8005fce <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005dca:	4b5a      	ldr	r3, [pc, #360]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd2:	2b18      	cmp	r3, #24
 8005dd4:	f000 80bd 	beq.w	8005f52 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f040 8095 	bne.w	8005f0c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	4b54      	ldr	r3, [pc, #336]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a53      	ldr	r2, [pc, #332]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fb fb01 	bl	80013f4 <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df6:	f7fb fafd 	bl	80013f4 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0e3      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e08:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e14:	4b47      	ldr	r3, [pc, #284]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e18:	4b48      	ldr	r3, [pc, #288]	; (8005f3c <HAL_RCC_OscConfig+0x7b8>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e24:	0112      	lsls	r2, r2, #4
 8005e26:	430a      	orrs	r2, r1
 8005e28:	4942      	ldr	r1, [pc, #264]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	628b      	str	r3, [r1, #40]	; 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	025b      	lsls	r3, r3, #9
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	3b01      	subs	r3, #1
 8005e58:	061b      	lsls	r3, r3, #24
 8005e5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e5e:	4935      	ldr	r1, [pc, #212]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a32      	ldr	r2, [pc, #200]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e70:	4b30      	ldr	r3, [pc, #192]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e74:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <HAL_RCC_OscConfig+0x7bc>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e7c:	00d2      	lsls	r2, r2, #3
 8005e7e:	492d      	ldr	r1, [pc, #180]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e84:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	f023 020c 	bic.w	r2, r3, #12
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	4928      	ldr	r1, [pc, #160]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e96:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	f023 0202 	bic.w	r2, r3, #2
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	4924      	ldr	r1, [pc, #144]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ea8:	4b22      	ldr	r3, [pc, #136]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fb fa86 	bl	80013f4 <HAL_GetTick>
 8005ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fb fa82 	bl	80013f4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e068      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0x768>
 8005f0a:	e060      	b.n	8005fce <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <HAL_RCC_OscConfig+0x7b0>)
 8005f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fb fa6c 	bl	80013f4 <HAL_GetTick>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1e:	e011      	b.n	8005f44 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fb fa68 	bl	80013f4 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d90a      	bls.n	8005f44 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e04e      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
 8005f32:	bf00      	nop
 8005f34:	58024400 	.word	0x58024400
 8005f38:	58024800 	.word	0x58024800
 8005f3c:	fffffc0c 	.word	0xfffffc0c
 8005f40:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCC_OscConfig+0x854>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e7      	bne.n	8005f20 <HAL_RCC_OscConfig+0x79c>
 8005f50:	e03d      	b.n	8005fce <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f52:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <HAL_RCC_OscConfig+0x854>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f58:	4b1f      	ldr	r3, [pc, #124]	; (8005fd8 <HAL_RCC_OscConfig+0x854>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d031      	beq.n	8005fca <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0203 	and.w	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d12a      	bne.n	8005fca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d122      	bne.n	8005fca <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d11a      	bne.n	8005fca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0a5b      	lsrs	r3, r3, #9
 8005f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d111      	bne.n	8005fca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	0e1b      	lsrs	r3, r3, #24
 8005fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d001      	beq.n	8005fce <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3730      	adds	r7, #48	; 0x30
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400

08005fdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e19c      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b8a      	ldr	r3, [pc, #552]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d910      	bls.n	8006020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b87      	ldr	r3, [pc, #540]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f023 020f 	bic.w	r2, r3, #15
 8006006:	4985      	ldr	r1, [pc, #532]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b83      	ldr	r3, [pc, #524]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d001      	beq.n	8006020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e184      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	4b7b      	ldr	r3, [pc, #492]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006038:	429a      	cmp	r2, r3
 800603a:	d908      	bls.n	800604e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800603c:	4b78      	ldr	r3, [pc, #480]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	4975      	ldr	r1, [pc, #468]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800604a:	4313      	orrs	r3, r2
 800604c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	4b70      	ldr	r3, [pc, #448]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006066:	429a      	cmp	r2, r3
 8006068:	d908      	bls.n	800607c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800606a:	4b6d      	ldr	r3, [pc, #436]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	496a      	ldr	r1, [pc, #424]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006078:	4313      	orrs	r3, r2
 800607a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	4b64      	ldr	r3, [pc, #400]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006094:	429a      	cmp	r2, r3
 8006096:	d908      	bls.n	80060aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006098:	4b61      	ldr	r3, [pc, #388]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	495e      	ldr	r1, [pc, #376]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d908      	bls.n	80060d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060c6:	4b56      	ldr	r3, [pc, #344]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	4953      	ldr	r1, [pc, #332]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d908      	bls.n	8006106 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f4:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f023 020f 	bic.w	r2, r3, #15
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4947      	ldr	r1, [pc, #284]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006102:	4313      	orrs	r3, r2
 8006104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d055      	beq.n	80061be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006112:	4b43      	ldr	r3, [pc, #268]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	4940      	ldr	r1, [pc, #256]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006120:	4313      	orrs	r3, r2
 8006122:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d107      	bne.n	800613c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800612c:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d121      	bne.n	800617c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0f6      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d107      	bne.n	8006154 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006144:	4b36      	ldr	r3, [pc, #216]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d115      	bne.n	800617c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0ea      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800615c:	4b30      	ldr	r3, [pc, #192]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0de      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0d6      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800617c:	4b28      	ldr	r3, [pc, #160]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f023 0207 	bic.w	r2, r3, #7
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4925      	ldr	r1, [pc, #148]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 800618a:	4313      	orrs	r3, r2
 800618c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618e:	f7fb f931 	bl	80013f4 <HAL_GetTick>
 8006192:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006194:	e00a      	b.n	80061ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006196:	f7fb f92d 	bl	80013f4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0be      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ac:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d1eb      	bne.n	8006196 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d010      	beq.n	80061ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d208      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f023 020f 	bic.w	r2, r3, #15
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	490e      	ldr	r1, [pc, #56]	; (8006220 <HAL_RCC_ClockConfig+0x244>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d214      	bcs.n	8006224 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 020f 	bic.w	r2, r3, #15
 8006202:	4906      	ldr	r1, [pc, #24]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b04      	ldr	r3, [pc, #16]	; (800621c <HAL_RCC_ClockConfig+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d005      	beq.n	8006224 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e086      	b.n	800632a <HAL_RCC_ClockConfig+0x34e>
 800621c:	52002000 	.word	0x52002000
 8006220:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800623c:	429a      	cmp	r2, r3
 800623e:	d208      	bcs.n	8006252 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006240:	4b3c      	ldr	r3, [pc, #240]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	4939      	ldr	r1, [pc, #228]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 800624e:	4313      	orrs	r3, r2
 8006250:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626a:	429a      	cmp	r2, r3
 800626c:	d208      	bcs.n	8006280 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	492e      	ldr	r1, [pc, #184]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 800627c:	4313      	orrs	r3, r2
 800627e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	2b00      	cmp	r3, #0
 800628a:	d010      	beq.n	80062ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006298:	429a      	cmp	r2, r3
 800629a:	d208      	bcs.n	80062ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	4922      	ldr	r1, [pc, #136]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d010      	beq.n	80062dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d208      	bcs.n	80062dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4917      	ldr	r1, [pc, #92]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062dc:	f000 f834 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	4912      	ldr	r1, [pc, #72]	; (8006338 <HAL_RCC_ClockConfig+0x35c>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <HAL_RCC_ClockConfig+0x358>)
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <HAL_RCC_ClockConfig+0x35c>)
 8006304:	5cd3      	ldrb	r3, [r2, r3]
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <HAL_RCC_ClockConfig+0x360>)
 8006312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x364>)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_RCC_ClockConfig+0x368>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fb f81e 	bl	8001360 <HAL_InitTick>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	58024400 	.word	0x58024400
 8006338:	08009414 	.word	0x08009414
 800633c:	20000004 	.word	0x20000004
 8006340:	20000000 	.word	0x20000000
 8006344:	20000008 	.word	0x20000008

08006348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800634e:	4bb3      	ldr	r3, [pc, #716]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006356:	2b18      	cmp	r3, #24
 8006358:	f200 8155 	bhi.w	8006606 <HAL_RCC_GetSysClockFreq+0x2be>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_RCC_GetSysClockFreq+0x1c>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	080063c9 	.word	0x080063c9
 8006368:	08006607 	.word	0x08006607
 800636c:	08006607 	.word	0x08006607
 8006370:	08006607 	.word	0x08006607
 8006374:	08006607 	.word	0x08006607
 8006378:	08006607 	.word	0x08006607
 800637c:	08006607 	.word	0x08006607
 8006380:	08006607 	.word	0x08006607
 8006384:	080063ef 	.word	0x080063ef
 8006388:	08006607 	.word	0x08006607
 800638c:	08006607 	.word	0x08006607
 8006390:	08006607 	.word	0x08006607
 8006394:	08006607 	.word	0x08006607
 8006398:	08006607 	.word	0x08006607
 800639c:	08006607 	.word	0x08006607
 80063a0:	08006607 	.word	0x08006607
 80063a4:	080063f5 	.word	0x080063f5
 80063a8:	08006607 	.word	0x08006607
 80063ac:	08006607 	.word	0x08006607
 80063b0:	08006607 	.word	0x08006607
 80063b4:	08006607 	.word	0x08006607
 80063b8:	08006607 	.word	0x08006607
 80063bc:	08006607 	.word	0x08006607
 80063c0:	08006607 	.word	0x08006607
 80063c4:	080063fb 	.word	0x080063fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c8:	4b94      	ldr	r3, [pc, #592]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063d4:	4b91      	ldr	r3, [pc, #580]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	08db      	lsrs	r3, r3, #3
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	4a90      	ldr	r2, [pc, #576]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063e6:	e111      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063e8:	4b8d      	ldr	r3, [pc, #564]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063ea:	61bb      	str	r3, [r7, #24]
    break;
 80063ec:	e10e      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063ee:	4b8d      	ldr	r3, [pc, #564]	; (8006624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063f0:	61bb      	str	r3, [r7, #24]
    break;
 80063f2:	e10b      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063f4:	4b8c      	ldr	r3, [pc, #560]	; (8006628 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063f6:	61bb      	str	r3, [r7, #24]
    break;
 80063f8:	e108      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063fa:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006404:	4b85      	ldr	r3, [pc, #532]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	091b      	lsrs	r3, r3, #4
 800640a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006410:	4b82      	ldr	r3, [pc, #520]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800641a:	4b80      	ldr	r3, [pc, #512]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80e1 	beq.w	8006600 <HAL_RCC_GetSysClockFreq+0x2b8>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f000 8083 	beq.w	800654c <HAL_RCC_GetSysClockFreq+0x204>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b02      	cmp	r3, #2
 800644a:	f200 80a1 	bhi.w	8006590 <HAL_RCC_GetSysClockFreq+0x248>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x114>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d056      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x1c0>
 800645a:	e099      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645c:	4b6f      	ldr	r3, [pc, #444]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02d      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006468:	4b6c      	ldr	r3, [pc, #432]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	4a6b      	ldr	r2, [pc, #428]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b62      	ldr	r3, [pc, #392]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80064c2:	e087      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	4b51      	ldr	r3, [pc, #324]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006506:	e065      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006634 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651a:	4b40      	ldr	r3, [pc, #256]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	ed97 6a02 	vldr	s12, [r7, #8]
 800652e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800654a:	e043      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006556:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006638 <HAL_RCC_GetSysClockFreq+0x2f0>
 800655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655e:	4b2f      	ldr	r3, [pc, #188]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006572:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658e:	e021      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006634 <HAL_RCC_GetSysClockFreq+0x2ec>
 800659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800662c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	0a5b      	lsrs	r3, r3, #9
 80065da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065de:	3301      	adds	r3, #1
 80065e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f8:	ee17 3a90 	vmov	r3, s15
 80065fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065fe:	e005      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	61bb      	str	r3, [r7, #24]
    break;
 8006604:	e002      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006608:	61bb      	str	r3, [r7, #24]
    break;
 800660a:	bf00      	nop
  }

  return sysclockfreq;
 800660c:	69bb      	ldr	r3, [r7, #24]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	58024400 	.word	0x58024400
 8006620:	03d09000 	.word	0x03d09000
 8006624:	003d0900 	.word	0x003d0900
 8006628:	017d7840 	.word	0x017d7840
 800662c:	46000000 	.word	0x46000000
 8006630:	4c742400 	.word	0x4c742400
 8006634:	4a742400 	.word	0x4a742400
 8006638:	4bbebc20 	.word	0x4bbebc20

0800663c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006642:	f7ff fe81 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8006646:	4602      	mov	r2, r0
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <HAL_RCC_GetHCLKFreq+0x50>)
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	490f      	ldr	r1, [pc, #60]	; (8006690 <HAL_RCC_GetHCLKFreq+0x54>)
 8006654:	5ccb      	ldrb	r3, [r1, r3]
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <HAL_RCC_GetHCLKFreq+0x50>)
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <HAL_RCC_GetHCLKFreq+0x54>)
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <HAL_RCC_GetHCLKFreq+0x58>)
 8006678:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800667a:	4a07      	ldr	r2, [pc, #28]	; (8006698 <HAL_RCC_GetHCLKFreq+0x5c>)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <HAL_RCC_GetHCLKFreq+0x58>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	58024400 	.word	0x58024400
 8006690:	08009414 	.word	0x08009414
 8006694:	20000004 	.word	0x20000004
 8006698:	20000000 	.word	0x20000000

0800669c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066a8:	2300      	movs	r3, #0
 80066aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d03f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c0:	d02a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80066c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c6:	d824      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066cc:	d018      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d2:	d81e      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d007      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80066de:	e018      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4bab      	ldr	r3, [pc, #684]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4aaa      	ldr	r2, [pc, #680]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066ec:	e015      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2102      	movs	r1, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fff3 	bl	80086e0 <RCCEx_PLL2_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066fe:	e00c      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f002 f89c 	bl	8008844 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006710:	e003      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
      break;
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006720:	4b9b      	ldr	r3, [pc, #620]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672c:	4998      	ldr	r1, [pc, #608]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800672e:	4313      	orrs	r3, r2
 8006730:	650b      	str	r3, [r1, #80]	; 0x50
 8006732:	e001      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d03d      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	2b04      	cmp	r3, #4
 800674a:	d826      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006769 	.word	0x08006769
 8006758:	08006777 	.word	0x08006777
 800675c:	08006789 	.word	0x08006789
 8006760:	080067a1 	.word	0x080067a1
 8006764:	080067a1 	.word	0x080067a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4b89      	ldr	r3, [pc, #548]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a88      	ldr	r2, [pc, #544]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006774:	e015      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 ffaf 	bl	80086e0 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006786:	e00c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3324      	adds	r3, #36	; 0x24
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f002 f858 	bl	8008844 <RCCEx_PLL3_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
      break;
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80067a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067a8:	4b79      	ldr	r3, [pc, #484]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	f023 0207 	bic.w	r2, r3, #7
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b4:	4976      	ldr	r1, [pc, #472]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	650b      	str	r3, [r1, #80]	; 0x50
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d042      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d4:	d02b      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067da:	d825      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067dc:	2bc0      	cmp	r3, #192	; 0xc0
 80067de:	d028      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067e0:	2bc0      	cmp	r3, #192	; 0xc0
 80067e2:	d821      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067e4:	2b80      	cmp	r3, #128	; 0x80
 80067e6:	d016      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d81d      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d007      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80067f4:	e018      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a65      	ldr	r2, [pc, #404]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006802:	e017      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f001 ff68 	bl	80086e0 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006814:	e00e      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3324      	adds	r3, #36	; 0x24
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f002 f811 	bl	8008844 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006826:	e005      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
      break;
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800683a:	4b55      	ldr	r3, [pc, #340]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	4952      	ldr	r1, [pc, #328]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006848:	4313      	orrs	r3, r2
 800684a:	650b      	str	r3, [r1, #80]	; 0x50
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	2b00      	cmp	r3, #0
 800685c:	d049      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006868:	d030      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800686a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800686e:	d82a      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006874:	d02c      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800687a:	d824      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006880:	d018      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006886:	d81e      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800688c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006890:	d007      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006892:	e018      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006894:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800689e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068a0:	e017      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 ff19 	bl	80086e0 <RCCEx_PLL2_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068b2:	e00e      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3324      	adds	r3, #36	; 0x24
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 ffc2 	bl	8008844 <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ca:	e002      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e6:	492a      	ldr	r1, [pc, #168]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	658b      	str	r3, [r1, #88]	; 0x58
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04c      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006908:	d030      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800690a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800690e:	d82a      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006914:	d02c      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800691a:	d824      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800691c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006920:	d018      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006926:	d81e      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800692c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006930:	d007      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006932:	e018      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006934:	4b16      	ldr	r3, [pc, #88]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006940:	e017      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3304      	adds	r3, #4
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fec9 	bl	80086e0 <RCCEx_PLL2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006952:	e00e      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f001 ff72 	bl	8008844 <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006964:	e005      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
      break;
 800696a:	e002      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800697a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006986:	4902      	ldr	r1, [pc, #8]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006988:	4313      	orrs	r3, r2
 800698a:	658b      	str	r3, [r1, #88]	; 0x58
 800698c:	e004      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800698e:	bf00      	nop
 8006990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d032      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d01c      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d817      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d00c      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d813      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d10f      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c0:	4baf      	ldr	r3, [pc, #700]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	4aae      	ldr	r2, [pc, #696]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069cc:	e00e      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	2102      	movs	r1, #2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 fe83 	bl	80086e0 <RCCEx_PLL2_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069de:	e005      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
      break;
 80069e4:	e002      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80069ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069f2:	4ba3      	ldr	r3, [pc, #652]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	49a0      	ldr	r1, [pc, #640]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a04:	e001      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d047      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1e:	d030      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a24:	d82a      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006a26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2a:	d02c      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006a2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a30:	d824      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a36:	d018      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3c:	d81e      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d007      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006a48:	e018      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a8c      	ldr	r2, [pc, #560]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a56:	e017      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 fe3e 	bl	80086e0 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a68:	e00e      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3324      	adds	r3, #36	; 0x24
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 fee7 	bl	8008844 <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a7a:	e005      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a80:	e002      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006a82:	bf00      	nop
 8006a84:	e000      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a8e:	4b7c      	ldr	r3, [pc, #496]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9a:	4979      	ldr	r1, [pc, #484]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	650b      	str	r3, [r1, #80]	; 0x50
 8006aa0:	e001      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d049      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aba:	d02e      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac0:	d828      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac6:	d02a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006acc:	d822      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad2:	d026      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad8:	d81c      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ade:	d010      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d816      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01d      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aee:	d111      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	2101      	movs	r1, #1
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fdf2 	bl	80086e0 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b00:	e012      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3324      	adds	r3, #36	; 0x24
 8006b06:	2101      	movs	r1, #1
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fe9b 	bl	8008844 <RCCEx_PLL3_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b12:	e009      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	e006      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e004      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e002      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b2e:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3a:	4951      	ldr	r1, [pc, #324]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	650b      	str	r3, [r1, #80]	; 0x50
 8006b40:	e001      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
 8006b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04b      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5c:	d02e      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b62:	d828      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d02a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d822      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b74:	d026      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b7a:	d81c      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b80:	d010      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b86:	d816      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01d      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b90:	d111      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	2101      	movs	r1, #1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fda1 	bl	80086e0 <RCCEx_PLL2_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ba2:	e012      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fe4a 	bl	8008844 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bb4:	e009      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bba:	e006      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e004      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e002      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e000      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bde:	4928      	ldr	r1, [pc, #160]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	658b      	str	r3, [r1, #88]	; 0x58
 8006be4:	e001      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02f      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfe:	d00e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d814      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d015      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c0e:	d10f      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c1c:	e00c      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	2101      	movs	r1, #1
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fd5b 	bl	80086e0 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
      break;
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4a:	490d      	ldr	r1, [pc, #52]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	650b      	str	r3, [r1, #80]	; 0x50
 8006c50:	e001      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d033      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d81c      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006cab 	.word	0x08006cab
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c93 	.word	0x08006c93
 8006c7c:	08006cab 	.word	0x08006cab
 8006c80:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4bb8      	ldr	r3, [pc, #736]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4ab7      	ldr	r2, [pc, #732]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c90:	e00c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 fd21 	bl	80086e0 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cb2:	4bad      	ldr	r3, [pc, #692]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	49aa      	ldr	r1, [pc, #680]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc4:	e001      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8086 	beq.w	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd8:	4ba4      	ldr	r3, [pc, #656]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4aa3      	ldr	r2, [pc, #652]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ce4:	f7fa fb86 	bl	80013f4 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cea:	e009      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fa fb82 	bl	80013f4 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d902      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8006cfe:	e005      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d00:	4b9a      	ldr	r3, [pc, #616]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ef      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d166      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d12:	4b95      	ldr	r3, [pc, #596]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d1c:	4053      	eors	r3, r2
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d013      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d26:	4b90      	ldr	r3, [pc, #576]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d30:	4b8d      	ldr	r3, [pc, #564]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a8c      	ldr	r2, [pc, #560]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d3c:	4b8a      	ldr	r3, [pc, #552]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	4a89      	ldr	r2, [pc, #548]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d48:	4a87      	ldr	r2, [pc, #540]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d58:	d115      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fa fb4b 	bl	80013f4 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d60:	e00b      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fa fb47 	bl	80013f4 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d902      	bls.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	75fb      	strb	r3, [r7, #23]
            break;
 8006d78:	e005      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7a:	4b7b      	ldr	r3, [pc, #492]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0ed      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d126      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d9a:	d10d      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006d9c:	4b72      	ldr	r3, [pc, #456]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006daa:	0919      	lsrs	r1, r3, #4
 8006dac:	4b70      	ldr	r3, [pc, #448]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006dae:	400b      	ands	r3, r1
 8006db0:	496d      	ldr	r1, [pc, #436]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	610b      	str	r3, [r1, #16]
 8006db6:	e005      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006db8:	4b6b      	ldr	r3, [pc, #428]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	4a6a      	ldr	r2, [pc, #424]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dc2:	6113      	str	r3, [r2, #16]
 8006dc4:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd2:	4965      	ldr	r1, [pc, #404]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	670b      	str	r3, [r1, #112]	; 0x70
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]
 8006dde:	e001      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d07e      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df4:	2b28      	cmp	r3, #40	; 0x28
 8006df6:	d867      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006ecf 	.word	0x08006ecf
 8006e04:	08006ec9 	.word	0x08006ec9
 8006e08:	08006ec9 	.word	0x08006ec9
 8006e0c:	08006ec9 	.word	0x08006ec9
 8006e10:	08006ec9 	.word	0x08006ec9
 8006e14:	08006ec9 	.word	0x08006ec9
 8006e18:	08006ec9 	.word	0x08006ec9
 8006e1c:	08006ec9 	.word	0x08006ec9
 8006e20:	08006ea5 	.word	0x08006ea5
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006ec9 	.word	0x08006ec9
 8006e2c:	08006ec9 	.word	0x08006ec9
 8006e30:	08006ec9 	.word	0x08006ec9
 8006e34:	08006ec9 	.word	0x08006ec9
 8006e38:	08006ec9 	.word	0x08006ec9
 8006e3c:	08006ec9 	.word	0x08006ec9
 8006e40:	08006eb7 	.word	0x08006eb7
 8006e44:	08006ec9 	.word	0x08006ec9
 8006e48:	08006ec9 	.word	0x08006ec9
 8006e4c:	08006ec9 	.word	0x08006ec9
 8006e50:	08006ec9 	.word	0x08006ec9
 8006e54:	08006ec9 	.word	0x08006ec9
 8006e58:	08006ec9 	.word	0x08006ec9
 8006e5c:	08006ec9 	.word	0x08006ec9
 8006e60:	08006ecf 	.word	0x08006ecf
 8006e64:	08006ec9 	.word	0x08006ec9
 8006e68:	08006ec9 	.word	0x08006ec9
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	08006ec9 	.word	0x08006ec9
 8006e80:	08006ecf 	.word	0x08006ecf
 8006e84:	08006ec9 	.word	0x08006ec9
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006ec9 	.word	0x08006ec9
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ec9 	.word	0x08006ec9
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006ecf 	.word	0x08006ecf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fc18 	bl	80086e0 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006eb4:	e00c      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3324      	adds	r3, #36	; 0x24
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fcc1 	bl	8008844 <RCCEx_PLL3_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	e000      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ed6:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee2:	4921      	ldr	r1, [pc, #132]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ee8:	e001      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d03e      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d820      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f4b 	.word	0x08006f4b
 8006f0c:	08006f21 	.word	0x08006f21
 8006f10:	08006f33 	.word	0x08006f33
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f4b 	.word	0x08006f4b
 8006f1c:	08006f4b 	.word	0x08006f4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 fbda 	bl	80086e0 <RCCEx_PLL2_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f30:	e00c      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	2101      	movs	r1, #1
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fc83 	bl	8008844 <RCCEx_PLL3_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f42:	e003      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	75fb      	strb	r3, [r7, #23]
      break;
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d110      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	f023 0207 	bic.w	r2, r3, #7
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	4902      	ldr	r1, [pc, #8]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	654b      	str	r3, [r1, #84]	; 0x54
 8006f64:	e008      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	58024800 	.word	0x58024800
 8006f70:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d039      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d820      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fd7 	.word	0x08006fd7
 8006f98:	08006fad 	.word	0x08006fad
 8006f9c:	08006fbf 	.word	0x08006fbf
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	08006fd7 	.word	0x08006fd7
 8006fa8:	08006fd7 	.word	0x08006fd7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 fb94 	bl	80086e0 <RCCEx_PLL2_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fbc:	e00c      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3324      	adds	r3, #36	; 0x24
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fc3d 	bl	8008844 <RCCEx_PLL3_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fde:	4bb7      	ldr	r3, [pc, #732]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe2:	f023 0207 	bic.w	r2, r3, #7
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	49b3      	ldr	r1, [pc, #716]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ff2:	e001      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d04b      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700e:	d02e      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007014:	d828      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701a:	d02a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d822      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007022:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007026:	d026      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007028:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800702c:	d81c      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007032:	d010      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007038:	d816      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01d      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800703e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007042:	d111      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fb48 	bl	80086e0 <RCCEx_PLL2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007054:	e012      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3324      	adds	r3, #36	; 0x24
 800705a:	2102      	movs	r1, #2
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fbf1 	bl	8008844 <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007066:	e009      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
      break;
 800706c:	e006      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800706e:	bf00      	nop
 8007070:	e004      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007072:	bf00      	nop
 8007074:	e002      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800707a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007082:	4b8e      	ldr	r3, [pc, #568]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007090:	498a      	ldr	r1, [pc, #552]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007092:	4313      	orrs	r3, r2
 8007094:	654b      	str	r3, [r1, #84]	; 0x54
 8007096:	e001      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d04b      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070b2:	d02e      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80070b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070b8:	d828      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80070ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070be:	d02a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80070c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c4:	d822      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80070c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ca:	d026      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80070cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d0:	d81c      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80070d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d6:	d010      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d816      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01d      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e6:	d111      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 faf6 	bl	80086e0 <RCCEx_PLL2_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070f8:	e012      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fb9f 	bl	8008844 <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800710a:	e009      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e006      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007112:	bf00      	nop
 8007114:	e004      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007116:	bf00      	nop
 8007118:	e002      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800711e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007126:	4b65      	ldr	r3, [pc, #404]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007134:	4961      	ldr	r1, [pc, #388]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007136:	4313      	orrs	r3, r2
 8007138:	658b      	str	r3, [r1, #88]	; 0x58
 800713a:	e001      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b00      	cmp	r3, #0
 800714a:	d04b      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007152:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007156:	d02e      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007158:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800715c:	d828      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007162:	d02a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007168:	d822      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800716a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800716e:	d026      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007170:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007174:	d81c      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717a:	d010      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800717c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007180:	d816      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01d      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718a:	d111      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f001 faa4 	bl	80086e0 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800719c:	e012      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	2102      	movs	r1, #2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 fb4d 	bl	8008844 <RCCEx_PLL3_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071ae:	e009      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80071b6:	bf00      	nop
 80071b8:	e004      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80071ba:	bf00      	nop
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80071c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071ca:	4b3c      	ldr	r3, [pc, #240]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071d8:	4938      	ldr	r1, [pc, #224]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	658b      	str	r3, [r1, #88]	; 0x58
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fa:	d10a      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3324      	adds	r3, #36	; 0x24
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fb1e 	bl	8008844 <RCCEx_PLL3_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007212:	4b2a      	ldr	r3, [pc, #168]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007220:	4926      	ldr	r1, [pc, #152]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007222:	4313      	orrs	r3, r2
 8007224:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723c:	d10a      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3324      	adds	r3, #36	; 0x24
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fafd 	bl	8008844 <RCCEx_PLL3_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007254:	4b19      	ldr	r3, [pc, #100]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007262:	4916      	ldr	r1, [pc, #88]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007264:	4313      	orrs	r3, r2
 8007266:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d036      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800727a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800727e:	d01f      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007284:	d817      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728e:	d009      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007290:	e011      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3304      	adds	r3, #4
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fa21 	bl	80086e0 <RCCEx_PLL2_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072a2:	e00e      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	2102      	movs	r1, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 faca 	bl	8008844 <RCCEx_PLL3_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80072bc:	58024400 	.word	0x58024400
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072c8:	4b93      	ldr	r3, [pc, #588]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072d6:	4990      	ldr	r1, [pc, #576]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	658b      	str	r3, [r1, #88]	; 0x58
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d033      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f8:	d01c      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80072fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072fe:	d816      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007304:	d003      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730a:	d007      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730e:	4b82      	ldr	r3, [pc, #520]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	4a81      	ldr	r2, [pc, #516]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800731a:	e00c      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f001 fa8e 	bl	8008844 <RCCEx_PLL3_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733c:	4b76      	ldr	r3, [pc, #472]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734a:	4973      	ldr	r1, [pc, #460]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	654b      	str	r3, [r1, #84]	; 0x54
 8007350:	e001      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d029      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800736a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736e:	d007      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007370:	e00f      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007372:	4b69      	ldr	r3, [pc, #420]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a68      	ldr	r2, [pc, #416]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800737e:	e00b      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	2102      	movs	r1, #2
 8007386:	4618      	mov	r0, r3
 8007388:	f001 f9aa 	bl	80086e0 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
      break;
 8007396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800739e:	4b5e      	ldr	r3, [pc, #376]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	495b      	ldr	r1, [pc, #364]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b0:	e001      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2102      	movs	r1, #2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 fa3b 	bl	8008844 <RCCEx_PLL3_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d030      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ec:	d017      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80073ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f2:	d811      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80073f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f8:	d013      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80073fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fe:	d80b      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d010      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007408:	d106      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740a:	4b43      	ldr	r3, [pc, #268]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	4a42      	ldr	r2, [pc, #264]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007416:	e007      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	75fb      	strb	r3, [r7, #23]
      break;
 800741c:	e004      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800742e:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	4937      	ldr	r1, [pc, #220]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800743c:	4313      	orrs	r3, r2
 800743e:	654b      	str	r3, [r1, #84]	; 0x54
 8007440:	e001      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007452:	4b31      	ldr	r3, [pc, #196]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	492e      	ldr	r1, [pc, #184]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007460:	4313      	orrs	r3, r2
 8007462:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007470:	4b29      	ldr	r3, [pc, #164]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800747e:	4926      	ldr	r1, [pc, #152]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007490:	4b21      	ldr	r3, [pc, #132]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800749c:	491e      	ldr	r1, [pc, #120]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	4a19      	ldr	r2, [pc, #100]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074b8:	6113      	str	r3, [r2, #16]
 80074ba:	4b17      	ldr	r3, [pc, #92]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074c4:	4914      	ldr	r1, [pc, #80]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	da08      	bge.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074de:	490e      	ldr	r1, [pc, #56]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	4906      	ldr	r1, [pc, #24]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007504:	7dbb      	ldrb	r3, [r7, #22]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58024400 	.word	0x58024400

0800751c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752a:	f040 8095 	bne.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800752e:	4bae      	ldr	r3, [pc, #696]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	633b      	str	r3, [r7, #48]	; 0x30
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2b04      	cmp	r3, #4
 800753c:	f200 8088 	bhi.w	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800755d 	.word	0x0800755d
 800754c:	08007585 	.word	0x08007585
 8007550:	080075ad 	.word	0x080075ad
 8007554:	08007649 	.word	0x08007649
 8007558:	080075d5 	.word	0x080075d5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800755c:	4ba2      	ldr	r3, [pc, #648]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007568:	d108      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800756a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800756e:	4618      	mov	r0, r3
 8007570:	f000 ff64 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007578:	f000 bc95 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007580:	f000 bc91 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007584:	4b98      	ldr	r3, [pc, #608]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007590:	d108      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007592:	f107 0318 	add.w	r3, r7, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fca8 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075a0:	f000 bc81 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a8:	f000 bc7d 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075ac:	4b8e      	ldr	r3, [pc, #568]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b8:	d108      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fde8 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075c8:	f000 bc6d 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075d0:	f000 bc69 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075d4:	4b84      	ldr	r3, [pc, #528]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075de:	4b82      	ldr	r3, [pc, #520]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d10c      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075f0:	4b7d      	ldr	r3, [pc, #500]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	08db      	lsrs	r3, r3, #3
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	4a7c      	ldr	r2, [pc, #496]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007602:	e01f      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007604:	4b78      	ldr	r3, [pc, #480]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d106      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007618:	d102      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800761a:	4b75      	ldr	r3, [pc, #468]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800761e:	e011      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007620:	4b71      	ldr	r3, [pc, #452]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762c:	d106      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007634:	d102      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007636:	4b6f      	ldr	r3, [pc, #444]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007640:	f000 bc31 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007644:	f000 bc2f 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007648:	4b6b      	ldr	r3, [pc, #428]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764c:	f000 bc2b 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007654:	f000 bc27 	b.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765e:	f040 8095 	bne.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007662:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800766a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007672:	d04d      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	f200 8084 	bhi.w	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2bc0      	cmp	r3, #192	; 0xc0
 8007682:	d07d      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2bc0      	cmp	r3, #192	; 0xc0
 8007688:	d87d      	bhi.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d02d      	beq.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d877      	bhi.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d012      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80076a2:	e070      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076a4:	4b50      	ldr	r3, [pc, #320]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b0:	d107      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fec0 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076c0:	e3f1      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c6:	e3ee      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076c8:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d4:	d107      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fc06 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076e4:	e3df      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ea:	e3dc      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076ec:	4b3e      	ldr	r3, [pc, #248]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f8:	d107      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fd48 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007708:	e3cd      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	e3ca      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007710:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007718:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800771a:	4b33      	ldr	r3, [pc, #204]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d10c      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800772c:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	08db      	lsrs	r3, r3, #3
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	4a2d      	ldr	r2, [pc, #180]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773e:	e01e      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007740:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774c:	d106      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007754:	d102      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007756:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800775a:	e010      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800775c:	4b22      	ldr	r3, [pc, #136]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007768:	d106      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007770:	d102      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007772:	4b20      	ldr	r3, [pc, #128]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007776:	e002      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800777c:	e393      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800777e:	e392      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007780:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007784:	e38f      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778a:	e38c      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007792:	f040 80a7 	bne.w	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800779e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077a6:	d05f      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077ae:	f200 8096 	bhi.w	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077b8:	f000 808e 	beq.w	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077c2:	f200 808c 	bhi.w	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077cc:	d03a      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d4:	f200 8083 	bhi.w	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e4:	d01c      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80077e6:	e07a      	b.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80077e8:	58024400 	.word	0x58024400
 80077ec:	03d09000 	.word	0x03d09000
 80077f0:	003d0900 	.word	0x003d0900
 80077f4:	017d7840 	.word	0x017d7840
 80077f8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077fc:	4baa      	ldr	r3, [pc, #680]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800780a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fe14 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007818:	e345      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781e:	e342      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007820:	4ba1      	ldr	r3, [pc, #644]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782e:	f107 0318 	add.w	r3, r7, #24
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fb5a 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800783c:	e333      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007842:	e330      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007844:	4b98      	ldr	r3, [pc, #608]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800784c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007850:	d107      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fc9c 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007860:	e321      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007866:	e31e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007868:	4b8f      	ldr	r3, [pc, #572]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007870:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007872:	4b8d      	ldr	r3, [pc, #564]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b04      	cmp	r3, #4
 800787c:	d10c      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800787e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007884:	4b88      	ldr	r3, [pc, #544]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	08db      	lsrs	r3, r3, #3
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	4a87      	ldr	r2, [pc, #540]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007896:	e01e      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007898:	4b83      	ldr	r3, [pc, #524]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a4:	d106      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ac:	d102      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80078ae:	4b80      	ldr	r3, [pc, #512]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b2:	e010      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078b4:	4b7c      	ldr	r3, [pc, #496]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078c0:	d106      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80078c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c8:	d102      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80078ca:	4b7a      	ldr	r3, [pc, #488]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ce:	e002      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80078d4:	e2e7      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078d6:	e2e6      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078d8:	4b77      	ldr	r3, [pc, #476]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078dc:	e2e3      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e2:	e2e0      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ea:	f040 809c 	bne.w	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80078ee:	4b6e      	ldr	r3, [pc, #440]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fe:	d054      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007906:	f200 808b 	bhi.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007910:	f000 8083 	beq.w	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800791a:	f200 8081 	bhi.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007924:	d02f      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800792c:	d878      	bhi.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800793c:	e070      	b.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800793e:	4b5a      	ldr	r3, [pc, #360]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800794a:	d107      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fd73 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800795a:	e2a4      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007960:	e2a1      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007962:	4b51      	ldr	r3, [pc, #324]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800796a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800796e:	d107      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007970:	f107 0318 	add.w	r3, r7, #24
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fab9 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800797e:	e292      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007984:	e28f      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007986:	4b48      	ldr	r3, [pc, #288]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007992:	d107      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fbfb 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079a2:	e280      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a8:	e27d      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079aa:	4b3f      	ldr	r3, [pc, #252]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079b4:	4b3c      	ldr	r3, [pc, #240]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d10c      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80079c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d109      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c6:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	08db      	lsrs	r3, r3, #3
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	4a36      	ldr	r2, [pc, #216]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d8:	e01e      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079da:	4b33      	ldr	r3, [pc, #204]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e6:	d106      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ee:	d102      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079f0:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f4:	e010      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079f6:	4b2c      	ldr	r3, [pc, #176]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a02:	d106      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a0a:	d102      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a0c:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a16:	e246      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a18:	e245      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a1a:	4b27      	ldr	r3, [pc, #156]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1e:	e242      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a24:	e23f      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	f040 80a8 	bne.w	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007a30:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a40:	d060      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a48:	f200 8097 	bhi.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a52:	f000 808f 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a5c:	f200 808d 	bhi.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a66:	d03b      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	f200 8084 	bhi.w	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7e:	d01d      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007a80:	e07b      	b.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a8e:	d107      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fcd1 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a9e:	e202      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa4:	e1ff      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	003d0900 	.word	0x003d0900
 8007ab4:	017d7840 	.word	0x017d7840
 8007ab8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007abc:	4ba3      	ldr	r3, [pc, #652]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac8:	d107      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aca:	f107 0318 	add.w	r3, r7, #24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fa0c 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ad8:	e1e5      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ade:	e1e2      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae0:	4b9a      	ldr	r3, [pc, #616]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aec:	d107      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aee:	f107 030c 	add.w	r3, r7, #12
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fb4e 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007afc:	e1d3      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b02:	e1d0      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b04:	4b91      	ldr	r3, [pc, #580]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b0e:	4b8f      	ldr	r3, [pc, #572]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d10c      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b20:	4b8a      	ldr	r3, [pc, #552]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	4a89      	ldr	r2, [pc, #548]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b32:	e01e      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b34:	4b85      	ldr	r3, [pc, #532]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b40:	d106      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b48:	d102      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b4a:	4b82      	ldr	r3, [pc, #520]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4e:	e010      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b50:	4b7e      	ldr	r3, [pc, #504]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b64:	d102      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b66:	4b7c      	ldr	r3, [pc, #496]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b6a:	e002      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b70:	e199      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b72:	e198      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b74:	4b79      	ldr	r3, [pc, #484]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b78:	e195      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7e:	e192      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b86:	d173      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007b88:	4b70      	ldr	r3, [pc, #448]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b98:	d02f      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba0:	d863      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bae:	d012      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007bb0:	e05b      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bb2:	4b66      	ldr	r3, [pc, #408]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f991 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bce:	e16a      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd4:	e167      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd6:	4b5d      	ldr	r3, [pc, #372]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d107      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fad3 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bf2:	e158      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf8:	e155      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bfa:	4b54      	ldr	r3, [pc, #336]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c04:	4b51      	ldr	r3, [pc, #324]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d10c      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c16:	4b4d      	ldr	r3, [pc, #308]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a4b      	ldr	r2, [pc, #300]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c28:	e01e      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c2a:	4b48      	ldr	r3, [pc, #288]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c36:	d106      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c40:	4b44      	ldr	r3, [pc, #272]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c44:	e010      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c46:	4b41      	ldr	r3, [pc, #260]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c5c:	4b3e      	ldr	r3, [pc, #248]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c66:	e11e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c68:	e11d      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c6e:	e11a      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c76:	d133      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c78:	4b34      	ldr	r3, [pc, #208]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d012      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007c90:	e023      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c92:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c9e:	d107      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fbc9 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cae:	e0fa      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb4:	e0f7      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cb6:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc4:	f107 0318 	add.w	r3, r7, #24
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f90f 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cd2:	e0e8      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd8:	e0e5      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cde:	e0e2      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce6:	f040 808f 	bne.w	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007cea:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cfa:	d075      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d02:	d87e      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0a:	d060      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d12:	d876      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d1a:	d045      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d22:	d86e      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d2a:	d02b      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d32:	d866      	bhi.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d40:	d00e      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007d42:	e05e      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d44:	f000 f8bc 	bl	8007ec0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d48:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007d4a:	e0ac      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	03d09000 	.word	0x03d09000
 8007d54:	003d0900 	.word	0x003d0900
 8007d58:	017d7840 	.word	0x017d7840
 8007d5c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d60:	4b53      	ldr	r3, [pc, #332]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d6e:	f107 0318 	add.w	r3, r7, #24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f8ba 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d7c:	e093      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d82:	e090      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d84:	4b4a      	ldr	r3, [pc, #296]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d90:	d107      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d92:	f107 030c 	add.w	r3, r7, #12
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f9fc 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007da0:	e081      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da6:	e07e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007da8:	4b41      	ldr	r3, [pc, #260]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d109      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007db4:	4b3e      	ldr	r3, [pc, #248]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	08db      	lsrs	r3, r3, #3
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	4a3d      	ldr	r2, [pc, #244]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007dc6:	e06e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dcc:	e06b      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dda:	d102      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007ddc:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007de0:	e061      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de6:	e05e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007de8:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df4:	d102      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007df6:	4b31      	ldr	r3, [pc, #196]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007dfa:	e054      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e00:	e051      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e06:	e04e      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0e:	d148      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007e10:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e20:	d02a      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e28:	d838      	bhi.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e36:	d00d      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007e38:	e030      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	d102      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007e48:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e4c:	e02b      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e52:	e028      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e54:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e60:	d107      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fae8 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e70:	e019      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e76:	e016      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e84:	d107      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e86:	f107 0318 	add.w	r3, r7, #24
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f82e 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007e94:	e007      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9a:	e004      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea0:	e001      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3740      	adds	r7, #64	; 0x40
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	03d09000 	.word	0x03d09000
 8007eb8:	003d0900 	.word	0x003d0900
 8007ebc:	017d7840 	.word	0x017d7840

08007ec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ec4:	f7fe fbba 	bl	800663c <HAL_RCC_GetHCLKFreq>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	4904      	ldr	r1, [pc, #16]	; (8007ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ed6:	5ccb      	ldrb	r3, [r1, r3]
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	08009414 	.word	0x08009414

08007eec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b089      	sub	sp, #36	; 0x24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ef4:	4ba1      	ldr	r3, [pc, #644]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007efe:	4b9f      	ldr	r3, [pc, #636]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	0b1b      	lsrs	r3, r3, #12
 8007f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f0a:	4b9c      	ldr	r3, [pc, #624]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f16:	4b99      	ldr	r3, [pc, #612]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1a:	08db      	lsrs	r3, r3, #3
 8007f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8111 	beq.w	800815c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	f000 8083 	beq.w	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	f200 80a1 	bhi.w	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d056      	beq.n	8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f56:	e099      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f58:	4b88      	ldr	r3, [pc, #544]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02d      	beq.n	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f64:	4b85      	ldr	r3, [pc, #532]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	08db      	lsrs	r3, r3, #3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	4a84      	ldr	r2, [pc, #528]	; (8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8e:	4b7b      	ldr	r3, [pc, #492]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fbe:	e087      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd2:	4b6a      	ldr	r3, [pc, #424]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008002:	e065      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008016:	4b59      	ldr	r3, [pc, #356]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008026:	ed97 6a03 	vldr	s12, [r7, #12]
 800802a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800803a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008046:	e043      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800805a:	4b48      	ldr	r3, [pc, #288]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800806a:	ed97 6a03 	vldr	s12, [r7, #12]
 800806e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800807a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800808a:	e021      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800809a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809e:	4b37      	ldr	r3, [pc, #220]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080d0:	4b2a      	ldr	r3, [pc, #168]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	0a5b      	lsrs	r3, r3, #9
 80080d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f6:	ee17 2a90 	vmov	r2, s15
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80080fe:	4b1f      	ldr	r3, [pc, #124]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008118:	edd7 6a07 	vldr	s13, [r7, #28]
 800811c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008124:	ee17 2a90 	vmov	r2, s15
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800812c:	4b13      	ldr	r3, [pc, #76]	; (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	0e1b      	lsrs	r3, r3, #24
 8008132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008146:	edd7 6a07 	vldr	s13, [r7, #28]
 800814a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800814e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008152:	ee17 2a90 	vmov	r2, s15
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800815a:	e008      	b.n	800816e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	609a      	str	r2, [r3, #8]
}
 800816e:	bf00      	nop
 8008170:	3724      	adds	r7, #36	; 0x24
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	58024400 	.word	0x58024400
 8008180:	03d09000 	.word	0x03d09000
 8008184:	46000000 	.word	0x46000000
 8008188:	4c742400 	.word	0x4c742400
 800818c:	4a742400 	.word	0x4a742400
 8008190:	4bbebc20 	.word	0x4bbebc20

08008194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008194:	b480      	push	{r7}
 8008196:	b089      	sub	sp, #36	; 0x24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800819c:	4ba1      	ldr	r3, [pc, #644]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081a6:	4b9f      	ldr	r3, [pc, #636]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081aa:	0d1b      	lsrs	r3, r3, #20
 80081ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081b2:	4b9c      	ldr	r3, [pc, #624]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081be:	4b99      	ldr	r3, [pc, #612]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c2:	08db      	lsrs	r3, r3, #3
 80081c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8111 	beq.w	8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	f000 8083 	beq.w	80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	f200 80a1 	bhi.w	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d056      	beq.n	80082ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081fe:	e099      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008200:	4b88      	ldr	r3, [pc, #544]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02d      	beq.n	8008268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800820c:	4b85      	ldr	r3, [pc, #532]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	4a84      	ldr	r2, [pc, #528]	; (8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008236:	4b7b      	ldr	r3, [pc, #492]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008246:	ed97 6a03 	vldr	s12, [r7, #12]
 800824a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800824e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008266:	e087      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827a:	4b6a      	ldr	r3, [pc, #424]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828a:	ed97 6a03 	vldr	s12, [r7, #12]
 800828e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082aa:	e065      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082be:	4b59      	ldr	r3, [pc, #356]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ee:	e043      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008302:	4b48      	ldr	r3, [pc, #288]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008312:	ed97 6a03 	vldr	s12, [r7, #12]
 8008316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800831a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008332:	e021      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008346:	4b37      	ldr	r3, [pc, #220]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a03 	vldr	s12, [r7, #12]
 800835a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008378:	4b2a      	ldr	r3, [pc, #168]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	0a5b      	lsrs	r3, r3, #9
 800837e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800838e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008392:	edd7 6a07 	vldr	s13, [r7, #28]
 8008396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839e:	ee17 2a90 	vmov	r2, s15
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083a6:	4b1f      	ldr	r3, [pc, #124]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	0c1b      	lsrs	r3, r3, #16
 80083ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083d4:	4b13      	ldr	r3, [pc, #76]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fa:	ee17 2a90 	vmov	r2, s15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008402:	e008      	b.n	8008416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
}
 8008416:	bf00      	nop
 8008418:	3724      	adds	r7, #36	; 0x24
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	58024400 	.word	0x58024400
 8008428:	03d09000 	.word	0x03d09000
 800842c:	46000000 	.word	0x46000000
 8008430:	4c742400 	.word	0x4c742400
 8008434:	4a742400 	.word	0x4a742400
 8008438:	4bbebc20 	.word	0x4bbebc20

0800843c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008444:	4ba0      	ldr	r3, [pc, #640]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800844e:	4b9e      	ldr	r3, [pc, #632]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008458:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800845a:	4b9b      	ldr	r3, [pc, #620]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008464:	4b98      	ldr	r3, [pc, #608]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	fb02 f303 	mul.w	r3, r2, r3
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8111 	beq.w	80086aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b02      	cmp	r3, #2
 800848c:	f000 8083 	beq.w	8008596 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b02      	cmp	r3, #2
 8008494:	f200 80a1 	bhi.w	80085da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d056      	beq.n	8008552 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084a4:	e099      	b.n	80085da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084a6:	4b88      	ldr	r3, [pc, #544]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d02d      	beq.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084b2:	4b85      	ldr	r3, [pc, #532]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	08db      	lsrs	r3, r3, #3
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	4a83      	ldr	r2, [pc, #524]	; (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084be:	fa22 f303 	lsr.w	r3, r2, r3
 80084c2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084dc:	4b7a      	ldr	r3, [pc, #488]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008508:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800850c:	e087      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008518:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800851c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008520:	4b69      	ldr	r3, [pc, #420]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008530:	ed97 6a03 	vldr	s12, [r7, #12]
 8008534:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008550:	e065      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008564:	4b58      	ldr	r3, [pc, #352]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008574:	ed97 6a03 	vldr	s12, [r7, #12]
 8008578:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800857c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008594:	e043      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a8:	4b47      	ldr	r3, [pc, #284]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d8:	e021      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ec:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008600:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800861c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800861e:	4b2a      	ldr	r3, [pc, #168]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	0a5b      	lsrs	r3, r3, #9
 8008624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008638:	edd7 6a07 	vldr	s13, [r7, #28]
 800863c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008644:	ee17 2a90 	vmov	r2, s15
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800864c:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008666:	edd7 6a07 	vldr	s13, [r7, #28]
 800866a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008672:	ee17 2a90 	vmov	r2, s15
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008694:	edd7 6a07 	vldr	s13, [r7, #28]
 8008698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800869c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a0:	ee17 2a90 	vmov	r2, s15
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086a8:	e008      	b.n	80086bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	3724      	adds	r7, #36	; 0x24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	58024400 	.word	0x58024400
 80086cc:	03d09000 	.word	0x03d09000
 80086d0:	46000000 	.word	0x46000000
 80086d4:	4c742400 	.word	0x4c742400
 80086d8:	4a742400 	.word	0x4a742400
 80086dc:	4bbebc20 	.word	0x4bbebc20

080086e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086ee:	4b53      	ldr	r3, [pc, #332]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d101      	bne.n	80086fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e099      	b.n	8008832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086fe:	4b4f      	ldr	r3, [pc, #316]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a4e      	ldr	r2, [pc, #312]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008704:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870a:	f7f8 fe73 	bl	80013f4 <HAL_GetTick>
 800870e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008710:	e008      	b.n	8008724 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008712:	f7f8 fe6f 	bl	80013f4 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e086      	b.n	8008832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008724:	4b45      	ldr	r3, [pc, #276]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008730:	4b42      	ldr	r3, [pc, #264]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	031b      	lsls	r3, r3, #12
 800873e:	493f      	ldr	r1, [pc, #252]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	628b      	str	r3, [r1, #40]	; 0x28
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	025b      	lsls	r3, r3, #9
 8008756:	b29b      	uxth	r3, r3
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	3b01      	subs	r3, #1
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	3b01      	subs	r3, #1
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008774:	4931      	ldr	r1, [pc, #196]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	492d      	ldr	r1, [pc, #180]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008788:	4313      	orrs	r3, r2
 800878a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f023 0220 	bic.w	r2, r3, #32
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	4928      	ldr	r1, [pc, #160]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800879e:	4b27      	ldr	r3, [pc, #156]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a26      	ldr	r2, [pc, #152]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087a4:	f023 0310 	bic.w	r3, r3, #16
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <RCCEx_PLL2_Config+0x160>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	69d2      	ldr	r2, [r2, #28]
 80087b6:	00d2      	lsls	r2, r2, #3
 80087b8:	4920      	ldr	r1, [pc, #128]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087be:	4b1f      	ldr	r3, [pc, #124]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087c4:	f043 0310 	orr.w	r3, r3, #16
 80087c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087d0:	4b1a      	ldr	r3, [pc, #104]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087dc:	e00f      	b.n	80087fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087e4:	4b15      	ldr	r3, [pc, #84]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a14      	ldr	r2, [pc, #80]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f0:	e005      	b.n	80087fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087f2:	4b12      	ldr	r3, [pc, #72]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	4a11      	ldr	r2, [pc, #68]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 80087f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a0e      	ldr	r2, [pc, #56]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880a:	f7f8 fdf3 	bl	80013f4 <HAL_GetTick>
 800880e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008810:	e008      	b.n	8008824 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008812:	f7f8 fdef 	bl	80013f4 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <RCCEx_PLL2_Config+0x15c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
 8008840:	ffff0007 	.word	0xffff0007

08008844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008852:	4b53      	ldr	r3, [pc, #332]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d101      	bne.n	8008862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e099      	b.n	8008996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008862:	4b4f      	ldr	r3, [pc, #316]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a4e      	ldr	r2, [pc, #312]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800886c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886e:	f7f8 fdc1 	bl	80013f4 <HAL_GetTick>
 8008872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008874:	e008      	b.n	8008888 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008876:	f7f8 fdbd 	bl	80013f4 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e086      	b.n	8008996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008888:	4b45      	ldr	r3, [pc, #276]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f0      	bne.n	8008876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008894:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	051b      	lsls	r3, r3, #20
 80088a2:	493f      	ldr	r1, [pc, #252]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	628b      	str	r3, [r1, #40]	; 0x28
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	025b      	lsls	r3, r3, #9
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088d8:	4931      	ldr	r1, [pc, #196]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088de:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	492d      	ldr	r1, [pc, #180]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088f0:	4b2b      	ldr	r3, [pc, #172]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	4928      	ldr	r1, [pc, #160]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008902:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <RCCEx_PLL3_Config+0x160>)
 8008914:	4013      	ands	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	69d2      	ldr	r2, [r2, #28]
 800891a:	00d2      	lsls	r2, r2, #3
 800891c:	4920      	ldr	r1, [pc, #128]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008922:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800892c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008934:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800893a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800893e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008940:	e00f      	b.n	8008962 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d106      	bne.n	8008956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800894e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008954:	e005      	b.n	8008962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	4a11      	ldr	r2, [pc, #68]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800895c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008962:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7f8 fd41 	bl	80013f4 <HAL_GetTick>
 8008972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008974:	e008      	b.n	8008988 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008976:	f7f8 fd3d 	bl	80013f4 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	58024400 	.word	0x58024400
 80089a4:	ffff0007 	.word	0xffff0007

080089a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e049      	b.n	8008a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f8 fb4a 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f000 faf8 	bl	8008fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d001      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e054      	b.n	8008b1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a26      	ldr	r2, [pc, #152]	; (8008b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d022      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9a:	d01d      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a22      	ldr	r2, [pc, #136]	; (8008b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d018      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a21      	ldr	r2, [pc, #132]	; (8008b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d013      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <HAL_TIM_Base_Start_IT+0xe0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d009      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <HAL_TIM_Base_Start_IT+0xe4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d004      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1b      	ldr	r2, [pc, #108]	; (8008b40 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d115      	bne.n	8008b04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <HAL_TIM_Base_Start_IT+0xec>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b06      	cmp	r3, #6
 8008ae8:	d015      	beq.n	8008b16 <HAL_TIM_Base_Start_IT+0xbe>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af0:	d011      	beq.n	8008b16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0201 	orr.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b02:	e008      	b.n	8008b16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f042 0201 	orr.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	e000      	b.n	8008b18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40010400 	.word	0x40010400
 8008b3c:	40001800 	.word	0x40001800
 8008b40:	40014000 	.word	0x40014000
 8008b44:	00010007 	.word	0x00010007

08008b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d122      	bne.n	8008ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d11b      	bne.n	8008ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f06f 0202 	mvn.w	r2, #2
 8008b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa08 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008b90:	e005      	b.n	8008b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9fa 	bl	8008f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fa0b 	bl	8008fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d122      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d11b      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f06f 0204 	mvn.w	r2, #4
 8008bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2202      	movs	r2, #2
 8008bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f9de 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008be4:	e005      	b.n	8008bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9d0 	bl	8008f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f9e1 	bl	8008fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d122      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0308 	and.w	r3, r3, #8
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d11b      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0208 	mvn.w	r2, #8
 8008c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2204      	movs	r2, #4
 8008c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9b4 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9a6 	bl	8008f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f9b7 	bl	8008fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d122      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d11b      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f06f 0210 	mvn.w	r2, #16
 8008c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2208      	movs	r2, #8
 8008c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f98a 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008c8c:	e005      	b.n	8008c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f97c 	bl	8008f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f98d 	bl	8008fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d10e      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d107      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0201 	mvn.w	r2, #1
 8008cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f956 	bl	8008f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b80      	cmp	r3, #128	; 0x80
 8008cd8:	d10e      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b80      	cmp	r3, #128	; 0x80
 8008ce6:	d107      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fb42 	bl	800937c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d06:	d10e      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d12:	2b80      	cmp	r3, #128	; 0x80
 8008d14:	d107      	bne.n	8008d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fb35 	bl	8009390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d10e      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	d107      	bne.n	8008d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f93b 	bl	8008fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d10e      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d107      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f06f 0220 	mvn.w	r2, #32
 8008d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 faf5 	bl	8009368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIM_ConfigClockSource+0x1c>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0dc      	b.n	8008f5e <HAL_TIM_ConfigClockSource+0x1d6>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4b6a      	ldr	r3, [pc, #424]	; (8008f68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a64      	ldr	r2, [pc, #400]	; (8008f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	f000 80a9 	beq.w	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008de0:	4a62      	ldr	r2, [pc, #392]	; (8008f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	f200 80ae 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008de8:	4a61      	ldr	r2, [pc, #388]	; (8008f70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	f000 80a1 	beq.w	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008df0:	4a5f      	ldr	r2, [pc, #380]	; (8008f70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	f200 80a6 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008df8:	4a5e      	ldr	r2, [pc, #376]	; (8008f74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	f000 8099 	beq.w	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e00:	4a5c      	ldr	r2, [pc, #368]	; (8008f74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f200 809e 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e0c:	f000 8091 	beq.w	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e14:	f200 8096 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1c:	f000 8089 	beq.w	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e24:	f200 808e 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e2c:	d03e      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0x124>
 8008e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e32:	f200 8087 	bhi.w	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3a:	f000 8086 	beq.w	8008f4a <HAL_TIM_ConfigClockSource+0x1c2>
 8008e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e42:	d87f      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e44:	2b70      	cmp	r3, #112	; 0x70
 8008e46:	d01a      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0xf6>
 8008e48:	2b70      	cmp	r3, #112	; 0x70
 8008e4a:	d87b      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e4c:	2b60      	cmp	r3, #96	; 0x60
 8008e4e:	d050      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x16a>
 8008e50:	2b60      	cmp	r3, #96	; 0x60
 8008e52:	d877      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e54:	2b50      	cmp	r3, #80	; 0x50
 8008e56:	d03c      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x14a>
 8008e58:	2b50      	cmp	r3, #80	; 0x50
 8008e5a:	d873      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d058      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0x18a>
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d86f      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e64:	2b30      	cmp	r3, #48	; 0x30
 8008e66:	d064      	beq.n	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e68:	2b30      	cmp	r3, #48	; 0x30
 8008e6a:	d86b      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d060      	beq.n	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d867      	bhi.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d05c      	beq.n	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	d05a      	beq.n	8008f32 <HAL_TIM_ConfigClockSource+0x1aa>
 8008e7c:	e062      	b.n	8008f44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6899      	ldr	r1, [r3, #8]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f000 f9bd 	bl	800920c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	609a      	str	r2, [r3, #8]
      break;
 8008eaa:	e04f      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6899      	ldr	r1, [r3, #8]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f000 f9a6 	bl	800920c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ece:	609a      	str	r2, [r3, #8]
      break;
 8008ed0:	e03c      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6859      	ldr	r1, [r3, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f000 f916 	bl	8009110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2150      	movs	r1, #80	; 0x50
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f970 	bl	80091d0 <TIM_ITRx_SetConfig>
      break;
 8008ef0:	e02c      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6859      	ldr	r1, [r3, #4]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f000 f935 	bl	800916e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2160      	movs	r1, #96	; 0x60
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f960 	bl	80091d0 <TIM_ITRx_SetConfig>
      break;
 8008f10:	e01c      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6859      	ldr	r1, [r3, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f000 f8f6 	bl	8009110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f950 	bl	80091d0 <TIM_ITRx_SetConfig>
      break;
 8008f30:	e00c      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f000 f947 	bl	80091d0 <TIM_ITRx_SetConfig>
      break;
 8008f42:	e003      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	73fb      	strb	r3, [r7, #15]
      break;
 8008f48:	e000      	b.n	8008f4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	ffceff88 	.word	0xffceff88
 8008f6c:	00100040 	.word	0x00100040
 8008f70:	00100030 	.word	0x00100030
 8008f74:	00100020 	.word	0x00100020

08008f78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a40      	ldr	r2, [pc, #256]	; (80090f0 <TIM_Base_SetConfig+0x114>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d013      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffa:	d00f      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a3d      	ldr	r2, [pc, #244]	; (80090f4 <TIM_Base_SetConfig+0x118>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00b      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a3c      	ldr	r2, [pc, #240]	; (80090f8 <TIM_Base_SetConfig+0x11c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a3b      	ldr	r2, [pc, #236]	; (80090fc <TIM_Base_SetConfig+0x120>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a3a      	ldr	r2, [pc, #232]	; (8009100 <TIM_Base_SetConfig+0x124>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d108      	bne.n	800902e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a2f      	ldr	r2, [pc, #188]	; (80090f0 <TIM_Base_SetConfig+0x114>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d01f      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903c:	d01b      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a2c      	ldr	r2, [pc, #176]	; (80090f4 <TIM_Base_SetConfig+0x118>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d017      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a2b      	ldr	r2, [pc, #172]	; (80090f8 <TIM_Base_SetConfig+0x11c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <TIM_Base_SetConfig+0x120>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00f      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a29      	ldr	r2, [pc, #164]	; (8009100 <TIM_Base_SetConfig+0x124>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00b      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a28      	ldr	r2, [pc, #160]	; (8009104 <TIM_Base_SetConfig+0x128>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d007      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a27      	ldr	r2, [pc, #156]	; (8009108 <TIM_Base_SetConfig+0x12c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d003      	beq.n	8009076 <TIM_Base_SetConfig+0x9a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a26      	ldr	r2, [pc, #152]	; (800910c <TIM_Base_SetConfig+0x130>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d108      	bne.n	8009088 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800907c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a10      	ldr	r2, [pc, #64]	; (80090f0 <TIM_Base_SetConfig+0x114>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00f      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a12      	ldr	r2, [pc, #72]	; (8009100 <TIM_Base_SetConfig+0x124>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00b      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a11      	ldr	r2, [pc, #68]	; (8009104 <TIM_Base_SetConfig+0x128>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a10      	ldr	r2, [pc, #64]	; (8009108 <TIM_Base_SetConfig+0x12c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a0f      	ldr	r2, [pc, #60]	; (800910c <TIM_Base_SetConfig+0x130>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d103      	bne.n	80090dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	615a      	str	r2, [r3, #20]
}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40010000 	.word	0x40010000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40010400 	.word	0x40010400
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	f023 0201 	bic.w	r2, r3, #1
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800913a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 030a 	bic.w	r3, r3, #10
 800914c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f023 0210 	bic.w	r2, r3, #16
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <TIM_ITRx_SetConfig+0x38>)
 80091e4:	4013      	ands	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	f043 0307 	orr.w	r3, r3, #7
 80091f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	609a      	str	r2, [r3, #8]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	ffcfff8f 	.word	0xffcfff8f

0800920c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	021a      	lsls	r2, r3, #8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	431a      	orrs	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4313      	orrs	r3, r2
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	609a      	str	r2, [r3, #8]
}
 8009240:	bf00      	nop
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009260:	2302      	movs	r3, #2
 8009262:	e06d      	b.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a30      	ldr	r2, [pc, #192]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a2f      	ldr	r2, [pc, #188]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d108      	bne.n	80092aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800929e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a20      	ldr	r2, [pc, #128]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d022      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d6:	d01d      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d018      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a1c      	ldr	r2, [pc, #112]	; (8009358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a1a      	ldr	r2, [pc, #104]	; (800935c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a15      	ldr	r2, [pc, #84]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a16      	ldr	r2, [pc, #88]	; (8009360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a15      	ldr	r2, [pc, #84]	; (8009364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10c      	bne.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	4313      	orrs	r3, r2
 8009324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40010000 	.word	0x40010000
 8009350:	40010400 	.word	0x40010400
 8009354:	40000400 	.word	0x40000400
 8009358:	40000800 	.word	0x40000800
 800935c:	40000c00 	.word	0x40000c00
 8009360:	40001800 	.word	0x40001800
 8009364:	40014000 	.word	0x40014000

08009368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <__libc_init_array>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	4d0d      	ldr	r5, [pc, #52]	; (80093dc <__libc_init_array+0x38>)
 80093a8:	4c0d      	ldr	r4, [pc, #52]	; (80093e0 <__libc_init_array+0x3c>)
 80093aa:	1b64      	subs	r4, r4, r5
 80093ac:	10a4      	asrs	r4, r4, #2
 80093ae:	2600      	movs	r6, #0
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	d109      	bne.n	80093c8 <__libc_init_array+0x24>
 80093b4:	4d0b      	ldr	r5, [pc, #44]	; (80093e4 <__libc_init_array+0x40>)
 80093b6:	4c0c      	ldr	r4, [pc, #48]	; (80093e8 <__libc_init_array+0x44>)
 80093b8:	f000 f820 	bl	80093fc <_init>
 80093bc:	1b64      	subs	r4, r4, r5
 80093be:	10a4      	asrs	r4, r4, #2
 80093c0:	2600      	movs	r6, #0
 80093c2:	42a6      	cmp	r6, r4
 80093c4:	d105      	bne.n	80093d2 <__libc_init_array+0x2e>
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093cc:	4798      	blx	r3
 80093ce:	3601      	adds	r6, #1
 80093d0:	e7ee      	b.n	80093b0 <__libc_init_array+0xc>
 80093d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d6:	4798      	blx	r3
 80093d8:	3601      	adds	r6, #1
 80093da:	e7f2      	b.n	80093c2 <__libc_init_array+0x1e>
 80093dc:	0800942c 	.word	0x0800942c
 80093e0:	0800942c 	.word	0x0800942c
 80093e4:	0800942c 	.word	0x0800942c
 80093e8:	08009430 	.word	0x08009430

080093ec <memset>:
 80093ec:	4402      	add	r2, r0
 80093ee:	4603      	mov	r3, r0
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d100      	bne.n	80093f6 <memset+0xa>
 80093f4:	4770      	bx	lr
 80093f6:	f803 1b01 	strb.w	r1, [r3], #1
 80093fa:	e7f9      	b.n	80093f0 <memset+0x4>

080093fc <_init>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr

08009408 <_fini>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr
